// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: listener/v1/listener.proto

package listenerv1

import (
	v1 "github.com/c2micro/c2mshr/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateListenerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// название листенера
	Name *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// IP адрес, на котором листенер слушает
	Ip *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// порт, на котором листенер слушает
	Port *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *UpdateListenerRequest) Reset() {
	*x = UpdateListenerRequest{}
	mi := &file_listener_v1_listener_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateListenerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListenerRequest) ProtoMessage() {}

func (x *UpdateListenerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListenerRequest.ProtoReflect.Descriptor instead.
func (*UpdateListenerRequest) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateListenerRequest) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *UpdateListenerRequest) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *UpdateListenerRequest) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type UpdateListenerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateListenerResponse) Reset() {
	*x = UpdateListenerResponse{}
	mi := &file_listener_v1_listener_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateListenerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateListenerResponse) ProtoMessage() {}

func (x *UpdateListenerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateListenerResponse.ProtoReflect.Descriptor instead.
func (*UpdateListenerResponse) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{1}
}

type NewBeaconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона, который он генерирует на старте
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// внешний IP адрес бикона
	ExtIp *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ext_ip,json=extIp,proto3" json:"ext_ip,omitempty"`
	// внутренний IP адрес бикона
	IntIp *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=int_ip,json=intIp,proto3" json:"int_ip,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] тип операционной системы, на которой запущен бикон
	Os uint32 `protobuf:"varint,4,opt,name=os,proto3" json:"os,omitempty"`
	// метадата операционной системы
	OsMeta *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=os_meta,json=osMeta,proto3" json:"os_meta,omitempty"`
	// имя хоста, на котором запущен бикон
	Hostname *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// имя пользователя процесса бикона
	Username *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=username,proto3" json:"username,omitempty"`
	// имя домена, в котором живет машина
	Domain *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=domain,proto3" json:"domain,omitempty"`
	// является ли процесс привилегированным
	Privileged *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// имя процесса
	ProcName *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`
	// pid процесса
	Pid *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=pid,proto3" json:"pid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] архитектура процесса
	Arch uint32 `protobuf:"varint,12,opt,name=arch,proto3" json:"arch,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] размер sleep'a бикона
	Sleep uint32 `protobuf:"varint,13,opt,name=sleep,proto3" json:"sleep,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] размер jitter'a sleep'a
	Jitter uint32 `protobuf:"varint,14,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] капабилити бикона
	Caps uint32 `protobuf:"varint,15,opt,name=caps,proto3" json:"caps,omitempty"`
}

func (x *NewBeaconRequest) Reset() {
	*x = NewBeaconRequest{}
	mi := &file_listener_v1_listener_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewBeaconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBeaconRequest) ProtoMessage() {}

func (x *NewBeaconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBeaconRequest.ProtoReflect.Descriptor instead.
func (*NewBeaconRequest) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{2}
}

func (x *NewBeaconRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NewBeaconRequest) GetExtIp() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtIp
	}
	return nil
}

func (x *NewBeaconRequest) GetIntIp() *wrapperspb.StringValue {
	if x != nil {
		return x.IntIp
	}
	return nil
}

func (x *NewBeaconRequest) GetOs() uint32 {
	if x != nil {
		return x.Os
	}
	return 0
}

func (x *NewBeaconRequest) GetOsMeta() *wrapperspb.StringValue {
	if x != nil {
		return x.OsMeta
	}
	return nil
}

func (x *NewBeaconRequest) GetHostname() *wrapperspb.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *NewBeaconRequest) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *NewBeaconRequest) GetDomain() *wrapperspb.StringValue {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *NewBeaconRequest) GetPrivileged() *wrapperspb.BoolValue {
	if x != nil {
		return x.Privileged
	}
	return nil
}

func (x *NewBeaconRequest) GetProcName() *wrapperspb.StringValue {
	if x != nil {
		return x.ProcName
	}
	return nil
}

func (x *NewBeaconRequest) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *NewBeaconRequest) GetArch() uint32 {
	if x != nil {
		return x.Arch
	}
	return 0
}

func (x *NewBeaconRequest) GetSleep() uint32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *NewBeaconRequest) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *NewBeaconRequest) GetCaps() uint32 {
	if x != nil {
		return x.Caps
	}
	return 0
}

type NewBeaconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewBeaconResponse) Reset() {
	*x = NewBeaconResponse{}
	mi := &file_listener_v1_listener_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewBeaconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewBeaconResponse) ProtoMessage() {}

func (x *NewBeaconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewBeaconResponse.ProtoReflect.Descriptor instead.
func (*NewBeaconResponse) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{3}
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	mi := &file_listener_v1_listener_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{4}
}

func (x *GetTaskRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID таска
	Tid int64 `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] капабилити
	Cap uint32 `protobuf:"varint,2,opt,name=cap,proto3" json:"cap,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] аргументы для капабилити
	//
	// Types that are assignable to Args:
	//
	//	*GetTaskResponse_Sleep
	//	*GetTaskResponse_Ls
	//	*GetTaskResponse_Pwd
	//	*GetTaskResponse_Cd
	//	*GetTaskResponse_Whoami
	//	*GetTaskResponse_Ps
	//	*GetTaskResponse_Cat
	//	*GetTaskResponse_Exec
	//	*GetTaskResponse_Cp
	//	*GetTaskResponse_Jobs
	//	*GetTaskResponse_Jobkill
	//	*GetTaskResponse_Kill
	//	*GetTaskResponse_Mv
	//	*GetTaskResponse_Mkdir
	//	*GetTaskResponse_Rm
	//	*GetTaskResponse_ExecAssembly
	//	*GetTaskResponse_ShellcodeInjection
	//	*GetTaskResponse_Download
	//	*GetTaskResponse_Upload
	//	*GetTaskResponse_Pause
	//	*GetTaskResponse_Destruct
	//	*GetTaskResponse_ExecDetach
	//	*GetTaskResponse_Shell
	//	*GetTaskResponse_Ppid
	//	*GetTaskResponse_Exit
	//	*GetTaskResponse_Socks5
	Args isGetTaskResponse_Args `protobuf_oneof:"args"`
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	mi := &file_listener_v1_listener_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{5}
}

func (x *GetTaskResponse) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *GetTaskResponse) GetCap() uint32 {
	if x != nil {
		return x.Cap
	}
	return 0
}

func (m *GetTaskResponse) GetArgs() isGetTaskResponse_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *GetTaskResponse) GetSleep() *v1.CapSleep {
	if x, ok := x.GetArgs().(*GetTaskResponse_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *GetTaskResponse) GetLs() *v1.CapLs {
	if x, ok := x.GetArgs().(*GetTaskResponse_Ls); ok {
		return x.Ls
	}
	return nil
}

func (x *GetTaskResponse) GetPwd() *v1.CapPwd {
	if x, ok := x.GetArgs().(*GetTaskResponse_Pwd); ok {
		return x.Pwd
	}
	return nil
}

func (x *GetTaskResponse) GetCd() *v1.CapCd {
	if x, ok := x.GetArgs().(*GetTaskResponse_Cd); ok {
		return x.Cd
	}
	return nil
}

func (x *GetTaskResponse) GetWhoami() *v1.CapWhoami {
	if x, ok := x.GetArgs().(*GetTaskResponse_Whoami); ok {
		return x.Whoami
	}
	return nil
}

func (x *GetTaskResponse) GetPs() *v1.CapPs {
	if x, ok := x.GetArgs().(*GetTaskResponse_Ps); ok {
		return x.Ps
	}
	return nil
}

func (x *GetTaskResponse) GetCat() *v1.CapCat {
	if x, ok := x.GetArgs().(*GetTaskResponse_Cat); ok {
		return x.Cat
	}
	return nil
}

func (x *GetTaskResponse) GetExec() *v1.CapExec {
	if x, ok := x.GetArgs().(*GetTaskResponse_Exec); ok {
		return x.Exec
	}
	return nil
}

func (x *GetTaskResponse) GetCp() *v1.CapCp {
	if x, ok := x.GetArgs().(*GetTaskResponse_Cp); ok {
		return x.Cp
	}
	return nil
}

func (x *GetTaskResponse) GetJobs() *v1.CapJobs {
	if x, ok := x.GetArgs().(*GetTaskResponse_Jobs); ok {
		return x.Jobs
	}
	return nil
}

func (x *GetTaskResponse) GetJobkill() *v1.CapJobkill {
	if x, ok := x.GetArgs().(*GetTaskResponse_Jobkill); ok {
		return x.Jobkill
	}
	return nil
}

func (x *GetTaskResponse) GetKill() *v1.CapKill {
	if x, ok := x.GetArgs().(*GetTaskResponse_Kill); ok {
		return x.Kill
	}
	return nil
}

func (x *GetTaskResponse) GetMv() *v1.CapMv {
	if x, ok := x.GetArgs().(*GetTaskResponse_Mv); ok {
		return x.Mv
	}
	return nil
}

func (x *GetTaskResponse) GetMkdir() *v1.CapMkdir {
	if x, ok := x.GetArgs().(*GetTaskResponse_Mkdir); ok {
		return x.Mkdir
	}
	return nil
}

func (x *GetTaskResponse) GetRm() *v1.CapRm {
	if x, ok := x.GetArgs().(*GetTaskResponse_Rm); ok {
		return x.Rm
	}
	return nil
}

func (x *GetTaskResponse) GetExecAssembly() *v1.CapExecAssembly {
	if x, ok := x.GetArgs().(*GetTaskResponse_ExecAssembly); ok {
		return x.ExecAssembly
	}
	return nil
}

func (x *GetTaskResponse) GetShellcodeInjection() *v1.CapShellcodeInjection {
	if x, ok := x.GetArgs().(*GetTaskResponse_ShellcodeInjection); ok {
		return x.ShellcodeInjection
	}
	return nil
}

func (x *GetTaskResponse) GetDownload() *v1.CapDownload {
	if x, ok := x.GetArgs().(*GetTaskResponse_Download); ok {
		return x.Download
	}
	return nil
}

func (x *GetTaskResponse) GetUpload() *v1.CapUpload {
	if x, ok := x.GetArgs().(*GetTaskResponse_Upload); ok {
		return x.Upload
	}
	return nil
}

func (x *GetTaskResponse) GetPause() *v1.CapPause {
	if x, ok := x.GetArgs().(*GetTaskResponse_Pause); ok {
		return x.Pause
	}
	return nil
}

func (x *GetTaskResponse) GetDestruct() *v1.CapDestruct {
	if x, ok := x.GetArgs().(*GetTaskResponse_Destruct); ok {
		return x.Destruct
	}
	return nil
}

func (x *GetTaskResponse) GetExecDetach() *v1.CapExecDetach {
	if x, ok := x.GetArgs().(*GetTaskResponse_ExecDetach); ok {
		return x.ExecDetach
	}
	return nil
}

func (x *GetTaskResponse) GetShell() *v1.CapShell {
	if x, ok := x.GetArgs().(*GetTaskResponse_Shell); ok {
		return x.Shell
	}
	return nil
}

func (x *GetTaskResponse) GetPpid() *v1.CapPpid {
	if x, ok := x.GetArgs().(*GetTaskResponse_Ppid); ok {
		return x.Ppid
	}
	return nil
}

func (x *GetTaskResponse) GetExit() *v1.CapExit {
	if x, ok := x.GetArgs().(*GetTaskResponse_Exit); ok {
		return x.Exit
	}
	return nil
}

func (x *GetTaskResponse) GetSocks5() *v1.CapSocks5 {
	if x, ok := x.GetArgs().(*GetTaskResponse_Socks5); ok {
		return x.Socks5
	}
	return nil
}

type isGetTaskResponse_Args interface {
	isGetTaskResponse_Args()
}

type GetTaskResponse_Sleep struct {
	Sleep *v1.CapSleep `protobuf:"bytes,3,opt,name=sleep,proto3,oneof"`
}

type GetTaskResponse_Ls struct {
	Ls *v1.CapLs `protobuf:"bytes,4,opt,name=ls,proto3,oneof"`
}

type GetTaskResponse_Pwd struct {
	Pwd *v1.CapPwd `protobuf:"bytes,5,opt,name=pwd,proto3,oneof"`
}

type GetTaskResponse_Cd struct {
	Cd *v1.CapCd `protobuf:"bytes,6,opt,name=cd,proto3,oneof"`
}

type GetTaskResponse_Whoami struct {
	Whoami *v1.CapWhoami `protobuf:"bytes,7,opt,name=whoami,proto3,oneof"`
}

type GetTaskResponse_Ps struct {
	Ps *v1.CapPs `protobuf:"bytes,8,opt,name=ps,proto3,oneof"`
}

type GetTaskResponse_Cat struct {
	Cat *v1.CapCat `protobuf:"bytes,9,opt,name=cat,proto3,oneof"`
}

type GetTaskResponse_Exec struct {
	Exec *v1.CapExec `protobuf:"bytes,10,opt,name=exec,proto3,oneof"`
}

type GetTaskResponse_Cp struct {
	Cp *v1.CapCp `protobuf:"bytes,11,opt,name=cp,proto3,oneof"`
}

type GetTaskResponse_Jobs struct {
	Jobs *v1.CapJobs `protobuf:"bytes,12,opt,name=jobs,proto3,oneof"`
}

type GetTaskResponse_Jobkill struct {
	Jobkill *v1.CapJobkill `protobuf:"bytes,13,opt,name=jobkill,proto3,oneof"`
}

type GetTaskResponse_Kill struct {
	Kill *v1.CapKill `protobuf:"bytes,14,opt,name=kill,proto3,oneof"`
}

type GetTaskResponse_Mv struct {
	Mv *v1.CapMv `protobuf:"bytes,15,opt,name=mv,proto3,oneof"`
}

type GetTaskResponse_Mkdir struct {
	Mkdir *v1.CapMkdir `protobuf:"bytes,16,opt,name=mkdir,proto3,oneof"`
}

type GetTaskResponse_Rm struct {
	Rm *v1.CapRm `protobuf:"bytes,17,opt,name=rm,proto3,oneof"`
}

type GetTaskResponse_ExecAssembly struct {
	ExecAssembly *v1.CapExecAssembly `protobuf:"bytes,18,opt,name=exec_assembly,json=execAssembly,proto3,oneof"`
}

type GetTaskResponse_ShellcodeInjection struct {
	ShellcodeInjection *v1.CapShellcodeInjection `protobuf:"bytes,19,opt,name=shellcode_injection,json=shellcodeInjection,proto3,oneof"`
}

type GetTaskResponse_Download struct {
	Download *v1.CapDownload `protobuf:"bytes,20,opt,name=download,proto3,oneof"`
}

type GetTaskResponse_Upload struct {
	Upload *v1.CapUpload `protobuf:"bytes,21,opt,name=upload,proto3,oneof"`
}

type GetTaskResponse_Pause struct {
	Pause *v1.CapPause `protobuf:"bytes,22,opt,name=pause,proto3,oneof"`
}

type GetTaskResponse_Destruct struct {
	Destruct *v1.CapDestruct `protobuf:"bytes,23,opt,name=destruct,proto3,oneof"`
}

type GetTaskResponse_ExecDetach struct {
	ExecDetach *v1.CapExecDetach `protobuf:"bytes,24,opt,name=exec_detach,json=execDetach,proto3,oneof"`
}

type GetTaskResponse_Shell struct {
	Shell *v1.CapShell `protobuf:"bytes,25,opt,name=shell,proto3,oneof"`
}

type GetTaskResponse_Ppid struct {
	Ppid *v1.CapPpid `protobuf:"bytes,26,opt,name=ppid,proto3,oneof"`
}

type GetTaskResponse_Exit struct {
	Exit *v1.CapExit `protobuf:"bytes,27,opt,name=exit,proto3,oneof"`
}

type GetTaskResponse_Socks5 struct {
	Socks5 *v1.CapSocks5 `protobuf:"bytes,28,opt,name=socks5,proto3,oneof"`
}

func (*GetTaskResponse_Sleep) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Ls) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Pwd) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Cd) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Whoami) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Ps) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Cat) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Exec) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Cp) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Jobs) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Jobkill) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Kill) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Mv) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Mkdir) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Rm) isGetTaskResponse_Args() {}

func (*GetTaskResponse_ExecAssembly) isGetTaskResponse_Args() {}

func (*GetTaskResponse_ShellcodeInjection) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Download) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Upload) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Pause) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Destruct) isGetTaskResponse_Args() {}

func (*GetTaskResponse_ExecDetach) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Shell) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Ppid) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Exit) isGetTaskResponse_Args() {}

func (*GetTaskResponse_Socks5) isGetTaskResponse_Args() {}

type PutResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID таска
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// бинарный output
	Output *wrapperspb.BytesValue `protobuf:"bytes,3,opt,name=output,proto3" json:"output,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] статус (может оставаться in progress, если задача долгоиграющая)
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *PutResultRequest) Reset() {
	*x = PutResultRequest{}
	mi := &file_listener_v1_listener_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResultRequest) ProtoMessage() {}

func (x *PutResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResultRequest.ProtoReflect.Descriptor instead.
func (*PutResultRequest) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{6}
}

func (x *PutResultRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *PutResultRequest) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *PutResultRequest) GetOutput() *wrapperspb.BytesValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *PutResultRequest) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PutResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutResultResponse) Reset() {
	*x = PutResultResponse{}
	mi := &file_listener_v1_listener_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutResultResponse) ProtoMessage() {}

func (x *PutResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_listener_v1_listener_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutResultResponse.ProtoReflect.Descriptor instead.
func (*PutResultResponse) Descriptor() ([]byte, []int) {
	return file_listener_v1_listener_proto_rawDescGZIP(), []int{7}
}

var File_listener_v1_listener_proto protoreflect.FileDescriptor

var file_listener_v1_listener_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x18, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfa, 0x04, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x78, 0x74, 0x49,
	0x70, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x61, 0x70, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0xed, 0x09,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x12, 0x22, 0x0a, 0x02, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4c, 0x73,
	0x48, 0x00, 0x52, 0x02, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x70, 0x77, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x50, 0x77, 0x64, 0x48, 0x00, 0x52, 0x03, 0x70, 0x77, 0x64, 0x12, 0x22, 0x0a,
	0x02, 0x63, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x43, 0x64, 0x48, 0x00, 0x52, 0x02, 0x63,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x77, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x70, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x48, 0x00, 0x52, 0x06, 0x77, 0x68, 0x6f, 0x61, 0x6d,
	0x69, 0x12, 0x22, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x50, 0x73, 0x48,
	0x00, 0x52, 0x02, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x70, 0x43, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x04,
	0x65, 0x78, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63, 0x48, 0x00,
	0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x02, 0x63, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x70, 0x43, 0x70, 0x48, 0x00, 0x52, 0x02, 0x63, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x6a, 0x6f,
	0x62, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4a, 0x6f, 0x62, 0x73, 0x48, 0x00, 0x52, 0x04,
	0x6a, 0x6f, 0x62, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x4a, 0x6f, 0x62, 0x6b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x22, 0x0a, 0x02, 0x6d, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4d, 0x76, 0x48,
	0x00, 0x52, 0x02, 0x6d, 0x76, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x70, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6b, 0x64,
	0x69, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x52, 0x6d,
	0x48, 0x00, 0x52, 0x02, 0x72, 0x6d, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x45, 0x78, 0x65,
	0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x65,
	0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x53, 0x0a, 0x13, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x45, 0x78, 0x65, 0x63,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x50,
	0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x65,
	0x78, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x65, 0x78, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x6f, 0x63, 0x6b, 0x73, 0x35, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x10, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x62, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xca, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x22,
	0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x77, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1b,
	0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x32, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2f, 0x63, 0x32, 0x6d, 0x73,
	0x68, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_listener_v1_listener_proto_rawDescOnce sync.Once
	file_listener_v1_listener_proto_rawDescData = file_listener_v1_listener_proto_rawDesc
)

func file_listener_v1_listener_proto_rawDescGZIP() []byte {
	file_listener_v1_listener_proto_rawDescOnce.Do(func() {
		file_listener_v1_listener_proto_rawDescData = protoimpl.X.CompressGZIP(file_listener_v1_listener_proto_rawDescData)
	})
	return file_listener_v1_listener_proto_rawDescData
}

var file_listener_v1_listener_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_listener_v1_listener_proto_goTypes = []any{
	(*UpdateListenerRequest)(nil),    // 0: listener.v1.UpdateListenerRequest
	(*UpdateListenerResponse)(nil),   // 1: listener.v1.UpdateListenerResponse
	(*NewBeaconRequest)(nil),         // 2: listener.v1.NewBeaconRequest
	(*NewBeaconResponse)(nil),        // 3: listener.v1.NewBeaconResponse
	(*GetTaskRequest)(nil),           // 4: listener.v1.GetTaskRequest
	(*GetTaskResponse)(nil),          // 5: listener.v1.GetTaskResponse
	(*PutResultRequest)(nil),         // 6: listener.v1.PutResultRequest
	(*PutResultResponse)(nil),        // 7: listener.v1.PutResultResponse
	(*wrapperspb.StringValue)(nil),   // 8: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),   // 9: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),     // 10: google.protobuf.BoolValue
	(*v1.CapSleep)(nil),              // 11: common.v1.CapSleep
	(*v1.CapLs)(nil),                 // 12: common.v1.CapLs
	(*v1.CapPwd)(nil),                // 13: common.v1.CapPwd
	(*v1.CapCd)(nil),                 // 14: common.v1.CapCd
	(*v1.CapWhoami)(nil),             // 15: common.v1.CapWhoami
	(*v1.CapPs)(nil),                 // 16: common.v1.CapPs
	(*v1.CapCat)(nil),                // 17: common.v1.CapCat
	(*v1.CapExec)(nil),               // 18: common.v1.CapExec
	(*v1.CapCp)(nil),                 // 19: common.v1.CapCp
	(*v1.CapJobs)(nil),               // 20: common.v1.CapJobs
	(*v1.CapJobkill)(nil),            // 21: common.v1.CapJobkill
	(*v1.CapKill)(nil),               // 22: common.v1.CapKill
	(*v1.CapMv)(nil),                 // 23: common.v1.CapMv
	(*v1.CapMkdir)(nil),              // 24: common.v1.CapMkdir
	(*v1.CapRm)(nil),                 // 25: common.v1.CapRm
	(*v1.CapExecAssembly)(nil),       // 26: common.v1.CapExecAssembly
	(*v1.CapShellcodeInjection)(nil), // 27: common.v1.CapShellcodeInjection
	(*v1.CapDownload)(nil),           // 28: common.v1.CapDownload
	(*v1.CapUpload)(nil),             // 29: common.v1.CapUpload
	(*v1.CapPause)(nil),              // 30: common.v1.CapPause
	(*v1.CapDestruct)(nil),           // 31: common.v1.CapDestruct
	(*v1.CapExecDetach)(nil),         // 32: common.v1.CapExecDetach
	(*v1.CapShell)(nil),              // 33: common.v1.CapShell
	(*v1.CapPpid)(nil),               // 34: common.v1.CapPpid
	(*v1.CapExit)(nil),               // 35: common.v1.CapExit
	(*v1.CapSocks5)(nil),             // 36: common.v1.CapSocks5
	(*wrapperspb.BytesValue)(nil),    // 37: google.protobuf.BytesValue
}
var file_listener_v1_listener_proto_depIdxs = []int32{
	8,  // 0: listener.v1.UpdateListenerRequest.name:type_name -> google.protobuf.StringValue
	8,  // 1: listener.v1.UpdateListenerRequest.ip:type_name -> google.protobuf.StringValue
	9,  // 2: listener.v1.UpdateListenerRequest.port:type_name -> google.protobuf.UInt32Value
	8,  // 3: listener.v1.NewBeaconRequest.ext_ip:type_name -> google.protobuf.StringValue
	8,  // 4: listener.v1.NewBeaconRequest.int_ip:type_name -> google.protobuf.StringValue
	8,  // 5: listener.v1.NewBeaconRequest.os_meta:type_name -> google.protobuf.StringValue
	8,  // 6: listener.v1.NewBeaconRequest.hostname:type_name -> google.protobuf.StringValue
	8,  // 7: listener.v1.NewBeaconRequest.username:type_name -> google.protobuf.StringValue
	8,  // 8: listener.v1.NewBeaconRequest.domain:type_name -> google.protobuf.StringValue
	10, // 9: listener.v1.NewBeaconRequest.privileged:type_name -> google.protobuf.BoolValue
	8,  // 10: listener.v1.NewBeaconRequest.proc_name:type_name -> google.protobuf.StringValue
	9,  // 11: listener.v1.NewBeaconRequest.pid:type_name -> google.protobuf.UInt32Value
	11, // 12: listener.v1.GetTaskResponse.sleep:type_name -> common.v1.CapSleep
	12, // 13: listener.v1.GetTaskResponse.ls:type_name -> common.v1.CapLs
	13, // 14: listener.v1.GetTaskResponse.pwd:type_name -> common.v1.CapPwd
	14, // 15: listener.v1.GetTaskResponse.cd:type_name -> common.v1.CapCd
	15, // 16: listener.v1.GetTaskResponse.whoami:type_name -> common.v1.CapWhoami
	16, // 17: listener.v1.GetTaskResponse.ps:type_name -> common.v1.CapPs
	17, // 18: listener.v1.GetTaskResponse.cat:type_name -> common.v1.CapCat
	18, // 19: listener.v1.GetTaskResponse.exec:type_name -> common.v1.CapExec
	19, // 20: listener.v1.GetTaskResponse.cp:type_name -> common.v1.CapCp
	20, // 21: listener.v1.GetTaskResponse.jobs:type_name -> common.v1.CapJobs
	21, // 22: listener.v1.GetTaskResponse.jobkill:type_name -> common.v1.CapJobkill
	22, // 23: listener.v1.GetTaskResponse.kill:type_name -> common.v1.CapKill
	23, // 24: listener.v1.GetTaskResponse.mv:type_name -> common.v1.CapMv
	24, // 25: listener.v1.GetTaskResponse.mkdir:type_name -> common.v1.CapMkdir
	25, // 26: listener.v1.GetTaskResponse.rm:type_name -> common.v1.CapRm
	26, // 27: listener.v1.GetTaskResponse.exec_assembly:type_name -> common.v1.CapExecAssembly
	27, // 28: listener.v1.GetTaskResponse.shellcode_injection:type_name -> common.v1.CapShellcodeInjection
	28, // 29: listener.v1.GetTaskResponse.download:type_name -> common.v1.CapDownload
	29, // 30: listener.v1.GetTaskResponse.upload:type_name -> common.v1.CapUpload
	30, // 31: listener.v1.GetTaskResponse.pause:type_name -> common.v1.CapPause
	31, // 32: listener.v1.GetTaskResponse.destruct:type_name -> common.v1.CapDestruct
	32, // 33: listener.v1.GetTaskResponse.exec_detach:type_name -> common.v1.CapExecDetach
	33, // 34: listener.v1.GetTaskResponse.shell:type_name -> common.v1.CapShell
	34, // 35: listener.v1.GetTaskResponse.ppid:type_name -> common.v1.CapPpid
	35, // 36: listener.v1.GetTaskResponse.exit:type_name -> common.v1.CapExit
	36, // 37: listener.v1.GetTaskResponse.socks5:type_name -> common.v1.CapSocks5
	37, // 38: listener.v1.PutResultRequest.output:type_name -> google.protobuf.BytesValue
	0,  // 39: listener.v1.ListenerService.UpdateListener:input_type -> listener.v1.UpdateListenerRequest
	2,  // 40: listener.v1.ListenerService.NewBeacon:input_type -> listener.v1.NewBeaconRequest
	4,  // 41: listener.v1.ListenerService.GetTask:input_type -> listener.v1.GetTaskRequest
	6,  // 42: listener.v1.ListenerService.PutResult:input_type -> listener.v1.PutResultRequest
	1,  // 43: listener.v1.ListenerService.UpdateListener:output_type -> listener.v1.UpdateListenerResponse
	3,  // 44: listener.v1.ListenerService.NewBeacon:output_type -> listener.v1.NewBeaconResponse
	5,  // 45: listener.v1.ListenerService.GetTask:output_type -> listener.v1.GetTaskResponse
	7,  // 46: listener.v1.ListenerService.PutResult:output_type -> listener.v1.PutResultResponse
	43, // [43:47] is the sub-list for method output_type
	39, // [39:43] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_listener_v1_listener_proto_init() }
func file_listener_v1_listener_proto_init() {
	if File_listener_v1_listener_proto != nil {
		return
	}
	file_listener_v1_listener_proto_msgTypes[5].OneofWrappers = []any{
		(*GetTaskResponse_Sleep)(nil),
		(*GetTaskResponse_Ls)(nil),
		(*GetTaskResponse_Pwd)(nil),
		(*GetTaskResponse_Cd)(nil),
		(*GetTaskResponse_Whoami)(nil),
		(*GetTaskResponse_Ps)(nil),
		(*GetTaskResponse_Cat)(nil),
		(*GetTaskResponse_Exec)(nil),
		(*GetTaskResponse_Cp)(nil),
		(*GetTaskResponse_Jobs)(nil),
		(*GetTaskResponse_Jobkill)(nil),
		(*GetTaskResponse_Kill)(nil),
		(*GetTaskResponse_Mv)(nil),
		(*GetTaskResponse_Mkdir)(nil),
		(*GetTaskResponse_Rm)(nil),
		(*GetTaskResponse_ExecAssembly)(nil),
		(*GetTaskResponse_ShellcodeInjection)(nil),
		(*GetTaskResponse_Download)(nil),
		(*GetTaskResponse_Upload)(nil),
		(*GetTaskResponse_Pause)(nil),
		(*GetTaskResponse_Destruct)(nil),
		(*GetTaskResponse_ExecDetach)(nil),
		(*GetTaskResponse_Shell)(nil),
		(*GetTaskResponse_Ppid)(nil),
		(*GetTaskResponse_Exit)(nil),
		(*GetTaskResponse_Socks5)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_listener_v1_listener_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_listener_v1_listener_proto_goTypes,
		DependencyIndexes: file_listener_v1_listener_proto_depIdxs,
		MessageInfos:      file_listener_v1_listener_proto_msgTypes,
	}.Build()
	File_listener_v1_listener_proto = out.File
	file_listener_v1_listener_proto_rawDesc = nil
	file_listener_v1_listener_proto_goTypes = nil
	file_listener_v1_listener_proto_depIdxs = nil
}
