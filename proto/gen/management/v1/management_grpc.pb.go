// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: management/v1/management.proto

package managementv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManagementService_GetOperators_FullMethodName       = "/management.v1.ManagementService/GetOperators"
	ManagementService_NewOperator_FullMethodName        = "/management.v1.ManagementService/NewOperator"
	ManagementService_RevokeOperator_FullMethodName     = "/management.v1.ManagementService/RevokeOperator"
	ManagementService_RegenerateOperator_FullMethodName = "/management.v1.ManagementService/RegenerateOperator"
	ManagementService_GetListeners_FullMethodName       = "/management.v1.ManagementService/GetListeners"
	ManagementService_NewListener_FullMethodName        = "/management.v1.ManagementService/NewListener"
	ManagementService_RevokeListener_FullMethodName     = "/management.v1.ManagementService/RevokeListener"
	ManagementService_RegenerateListener_FullMethodName = "/management.v1.ManagementService/RegenerateListener"
	ManagementService_GetCertCA_FullMethodName          = "/management.v1.ManagementService/GetCertCA"
	ManagementService_GetCertOperator_FullMethodName    = "/management.v1.ManagementService/GetCertOperator"
	ManagementService_GetCertListener_FullMethodName    = "/management.v1.ManagementService/GetCertListener"
)

// ManagementServiceClient is the client API for ManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementServiceClient interface {
	// получение зарегистрированных операторов
	GetOperators(ctx context.Context, in *GetOperatorsRequest, opts ...grpc.CallOption) (*GetOperatorsResponse, error)
	// создание нового оператора
	NewOperator(ctx context.Context, in *NewOperatorRequest, opts ...grpc.CallOption) (*NewOperatorResponse, error)
	// удаление access токена у оператора
	RevokeOperator(ctx context.Context, in *RevokeOperatorRequest, opts ...grpc.CallOption) (*RevokeOperatorResponse, error)
	// регенерация access токена оператора
	RegenerateOperator(ctx context.Context, in *RegenerateOperatorRequest, opts ...grpc.CallOption) (*RegenerateOperatorResponse, error)
	// получение зарегистрированных листенеров
	GetListeners(ctx context.Context, in *GetListenersRequest, opts ...grpc.CallOption) (*GetListenersResponse, error)
	// создание нового листенера
	NewListener(ctx context.Context, in *NewListenerRequest, opts ...grpc.CallOption) (*NewListenerResponse, error)
	// удаление access токена у листенера
	RevokeListener(ctx context.Context, in *RevokeListenerRequest, opts ...grpc.CallOption) (*RevokeListenerResponse, error)
	// регенерация access токена для листенера
	RegenerateListener(ctx context.Context, in *RegenerateListenerRequest, opts ...grpc.CallOption) (*RegenerateListenerResponse, error)
	// получение CA сертификата PKI (GRPC)
	GetCertCA(ctx context.Context, in *GetCertCARequest, opts ...grpc.CallOption) (*GetCertCAResponse, error)
	// получение сертификата операторского GRPC
	GetCertOperator(ctx context.Context, in *GetCertOperatorRequest, opts ...grpc.CallOption) (*GetCertOperatorResponse, error)
	// получение сертификата листенерового GRPC
	GetCertListener(ctx context.Context, in *GetCertListenerRequest, opts ...grpc.CallOption) (*GetCertListenerResponse, error)
}

type managementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementServiceClient(cc grpc.ClientConnInterface) ManagementServiceClient {
	return &managementServiceClient{cc}
}

func (c *managementServiceClient) GetOperators(ctx context.Context, in *GetOperatorsRequest, opts ...grpc.CallOption) (*GetOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperatorsResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) NewOperator(ctx context.Context, in *NewOperatorRequest, opts ...grpc.CallOption) (*NewOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewOperatorResponse)
	err := c.cc.Invoke(ctx, ManagementService_NewOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RevokeOperator(ctx context.Context, in *RevokeOperatorRequest, opts ...grpc.CallOption) (*RevokeOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeOperatorResponse)
	err := c.cc.Invoke(ctx, ManagementService_RevokeOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegenerateOperator(ctx context.Context, in *RegenerateOperatorRequest, opts ...grpc.CallOption) (*RegenerateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateOperatorResponse)
	err := c.cc.Invoke(ctx, ManagementService_RegenerateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetListeners(ctx context.Context, in *GetListenersRequest, opts ...grpc.CallOption) (*GetListenersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListenersResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetListeners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) NewListener(ctx context.Context, in *NewListenerRequest, opts ...grpc.CallOption) (*NewListenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewListenerResponse)
	err := c.cc.Invoke(ctx, ManagementService_NewListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RevokeListener(ctx context.Context, in *RevokeListenerRequest, opts ...grpc.CallOption) (*RevokeListenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeListenerResponse)
	err := c.cc.Invoke(ctx, ManagementService_RevokeListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RegenerateListener(ctx context.Context, in *RegenerateListenerRequest, opts ...grpc.CallOption) (*RegenerateListenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateListenerResponse)
	err := c.cc.Invoke(ctx, ManagementService_RegenerateListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCertCA(ctx context.Context, in *GetCertCARequest, opts ...grpc.CallOption) (*GetCertCAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCertCAResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetCertCA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCertOperator(ctx context.Context, in *GetCertOperatorRequest, opts ...grpc.CallOption) (*GetCertOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCertOperatorResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetCertOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCertListener(ctx context.Context, in *GetCertListenerRequest, opts ...grpc.CallOption) (*GetCertListenerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCertListenerResponse)
	err := c.cc.Invoke(ctx, ManagementService_GetCertListener_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServiceServer is the server API for ManagementService service.
// All implementations must embed UnimplementedManagementServiceServer
// for forward compatibility.
type ManagementServiceServer interface {
	// получение зарегистрированных операторов
	GetOperators(context.Context, *GetOperatorsRequest) (*GetOperatorsResponse, error)
	// создание нового оператора
	NewOperator(context.Context, *NewOperatorRequest) (*NewOperatorResponse, error)
	// удаление access токена у оператора
	RevokeOperator(context.Context, *RevokeOperatorRequest) (*RevokeOperatorResponse, error)
	// регенерация access токена оператора
	RegenerateOperator(context.Context, *RegenerateOperatorRequest) (*RegenerateOperatorResponse, error)
	// получение зарегистрированных листенеров
	GetListeners(context.Context, *GetListenersRequest) (*GetListenersResponse, error)
	// создание нового листенера
	NewListener(context.Context, *NewListenerRequest) (*NewListenerResponse, error)
	// удаление access токена у листенера
	RevokeListener(context.Context, *RevokeListenerRequest) (*RevokeListenerResponse, error)
	// регенерация access токена для листенера
	RegenerateListener(context.Context, *RegenerateListenerRequest) (*RegenerateListenerResponse, error)
	// получение CA сертификата PKI (GRPC)
	GetCertCA(context.Context, *GetCertCARequest) (*GetCertCAResponse, error)
	// получение сертификата операторского GRPC
	GetCertOperator(context.Context, *GetCertOperatorRequest) (*GetCertOperatorResponse, error)
	// получение сертификата листенерового GRPC
	GetCertListener(context.Context, *GetCertListenerRequest) (*GetCertListenerResponse, error)
	mustEmbedUnimplementedManagementServiceServer()
}

// UnimplementedManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagementServiceServer struct{}

func (UnimplementedManagementServiceServer) GetOperators(context.Context, *GetOperatorsRequest) (*GetOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperators not implemented")
}
func (UnimplementedManagementServiceServer) NewOperator(context.Context, *NewOperatorRequest) (*NewOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOperator not implemented")
}
func (UnimplementedManagementServiceServer) RevokeOperator(context.Context, *RevokeOperatorRequest) (*RevokeOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeOperator not implemented")
}
func (UnimplementedManagementServiceServer) RegenerateOperator(context.Context, *RegenerateOperatorRequest) (*RegenerateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateOperator not implemented")
}
func (UnimplementedManagementServiceServer) GetListeners(context.Context, *GetListenersRequest) (*GetListenersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListeners not implemented")
}
func (UnimplementedManagementServiceServer) NewListener(context.Context, *NewListenerRequest) (*NewListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewListener not implemented")
}
func (UnimplementedManagementServiceServer) RevokeListener(context.Context, *RevokeListenerRequest) (*RevokeListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeListener not implemented")
}
func (UnimplementedManagementServiceServer) RegenerateListener(context.Context, *RegenerateListenerRequest) (*RegenerateListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateListener not implemented")
}
func (UnimplementedManagementServiceServer) GetCertCA(context.Context, *GetCertCARequest) (*GetCertCAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertCA not implemented")
}
func (UnimplementedManagementServiceServer) GetCertOperator(context.Context, *GetCertOperatorRequest) (*GetCertOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertOperator not implemented")
}
func (UnimplementedManagementServiceServer) GetCertListener(context.Context, *GetCertListenerRequest) (*GetCertListenerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertListener not implemented")
}
func (UnimplementedManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {}
func (UnimplementedManagementServiceServer) testEmbeddedByValue()                           {}

// UnsafeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServiceServer will
// result in compilation errors.
type UnsafeManagementServiceServer interface {
	mustEmbedUnimplementedManagementServiceServer()
}

func RegisterManagementServiceServer(s grpc.ServiceRegistrar, srv ManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManagementService_ServiceDesc, srv)
}

func _ManagementService_GetOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetOperators(ctx, req.(*GetOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_NewOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).NewOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_NewOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).NewOperator(ctx, req.(*NewOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RevokeOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RevokeOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_RevokeOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RevokeOperator(ctx, req.(*RevokeOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegenerateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegenerateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_RegenerateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegenerateOperator(ctx, req.(*RegenerateOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetListeners(ctx, req.(*GetListenersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_NewListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).NewListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_NewListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).NewListener(ctx, req.(*NewListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RevokeListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RevokeListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_RevokeListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RevokeListener(ctx, req.(*RevokeListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RegenerateListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RegenerateListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_RegenerateListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RegenerateListener(ctx, req.(*RegenerateListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCertCA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertCARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCertCA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetCertCA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCertCA(ctx, req.(*GetCertCARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCertOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCertOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetCertOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCertOperator(ctx, req.(*GetCertOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCertListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCertListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManagementService_GetCertListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCertListener(ctx, req.(*GetCertListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementService_ServiceDesc is the grpc.ServiceDesc for ManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "management.v1.ManagementService",
	HandlerType: (*ManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOperators",
			Handler:    _ManagementService_GetOperators_Handler,
		},
		{
			MethodName: "NewOperator",
			Handler:    _ManagementService_NewOperator_Handler,
		},
		{
			MethodName: "RevokeOperator",
			Handler:    _ManagementService_RevokeOperator_Handler,
		},
		{
			MethodName: "RegenerateOperator",
			Handler:    _ManagementService_RegenerateOperator_Handler,
		},
		{
			MethodName: "GetListeners",
			Handler:    _ManagementService_GetListeners_Handler,
		},
		{
			MethodName: "NewListener",
			Handler:    _ManagementService_NewListener_Handler,
		},
		{
			MethodName: "RevokeListener",
			Handler:    _ManagementService_RevokeListener_Handler,
		},
		{
			MethodName: "RegenerateListener",
			Handler:    _ManagementService_RegenerateListener_Handler,
		},
		{
			MethodName: "GetCertCA",
			Handler:    _ManagementService_GetCertCA_Handler,
		},
		{
			MethodName: "GetCertOperator",
			Handler:    _ManagementService_GetCertOperator_Handler,
		},
		{
			MethodName: "GetCertListener",
			Handler:    _ManagementService_GetCertListener_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "management/v1/management.proto",
}
