// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: operator/v1/operator.proto

package operatorv1

import (
	v1 "github.com/c2micro/c2mshr/proto/gen/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SessionCookie тип для передачи сессионного трекера - куки
type SessionCookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] значение сессионной куки
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SessionCookie) Reset() {
	*x = SessionCookie{}
	mi := &file_operator_v1_operator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionCookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionCookie) ProtoMessage() {}

func (x *SessionCookie) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionCookie.ProtoReflect.Descriptor instead.
func (*SessionCookie) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{0}
}

func (x *SessionCookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// --> CancelTasks
type CancelTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,2,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *CancelTasksRequest) Reset() {
	*x = CancelTasksRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTasksRequest) ProtoMessage() {}

func (x *CancelTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTasksRequest.ProtoReflect.Descriptor instead.
func (*CancelTasksRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{1}
}

func (x *CancelTasksRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *CancelTasksRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

type CancelTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelTasksResponse) Reset() {
	*x = CancelTasksResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTasksResponse) ProtoMessage() {}

func (x *CancelTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTasksResponse.ProtoReflect.Descriptor instead.
func (*CancelTasksResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{2}
}

// --> SetCredentialsNote
type SetCredentialsNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] список из ID кредов
	Cids []int64 `protobuf:"varint,2,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] заметка на креды
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SetCredentialsNoteRequest) Reset() {
	*x = SetCredentialsNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsNoteRequest) ProtoMessage() {}

func (x *SetCredentialsNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsNoteRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialsNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{3}
}

func (x *SetCredentialsNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialsNoteRequest) GetCids() []int64 {
	if x != nil {
		return x.Cids
	}
	return nil
}

func (x *SetCredentialsNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetCredentialsNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCredentialsNoteResponse) Reset() {
	*x = SetCredentialsNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsNoteResponse) ProtoMessage() {}

func (x *SetCredentialsNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsNoteResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialsNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{4}
}

// --> SetCredentialNote
type SetCredentialNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID кредов
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] заметка на креды
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SetCredentialNoteRequest) Reset() {
	*x = SetCredentialNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialNoteRequest) ProtoMessage() {}

func (x *SetCredentialNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialNoteRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{5}
}

func (x *SetCredentialNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialNoteRequest) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *SetCredentialNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetCredentialNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCredentialNoteResponse) Reset() {
	*x = SetCredentialNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialNoteResponse) ProtoMessage() {}

func (x *SetCredentialNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialNoteResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{6}
}

// --> SetCredentialsColor
type SetCredentialsColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] список из ID кредов
	Cids []int64 `protobuf:"varint,2,rep,packed,name=cids,proto3" json:"cids,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет на креды
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetCredentialsColorRequest) Reset() {
	*x = SetCredentialsColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsColorRequest) ProtoMessage() {}

func (x *SetCredentialsColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsColorRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialsColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{7}
}

func (x *SetCredentialsColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialsColorRequest) GetCids() []int64 {
	if x != nil {
		return x.Cids
	}
	return nil
}

func (x *SetCredentialsColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetCredentialsColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCredentialsColorResponse) Reset() {
	*x = SetCredentialsColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialsColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialsColorResponse) ProtoMessage() {}

func (x *SetCredentialsColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialsColorResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialsColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{8}
}

// --> SetCredentialColor
type SetCredentialColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID кредов
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет на креды
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetCredentialColorRequest) Reset() {
	*x = SetCredentialColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialColorRequest) ProtoMessage() {}

func (x *SetCredentialColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialColorRequest.ProtoReflect.Descriptor instead.
func (*SetCredentialColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{9}
}

func (x *SetCredentialColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetCredentialColorRequest) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *SetCredentialColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetCredentialColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCredentialColorResponse) Reset() {
	*x = SetCredentialColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCredentialColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCredentialColorResponse) ProtoMessage() {}

func (x *SetCredentialColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCredentialColorResponse.ProtoReflect.Descriptor instead.
func (*SetCredentialColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{10}
}

// --> NewCredential
type NewCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// username
	Username *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// password
	Password *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// realm
	Realm *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=realm,proto3" json:"realm,omitempty"`
	// host
	Host *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *NewCredentialRequest) Reset() {
	*x = NewCredentialRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCredentialRequest) ProtoMessage() {}

func (x *NewCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCredentialRequest.ProtoReflect.Descriptor instead.
func (*NewCredentialRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{11}
}

func (x *NewCredentialRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *NewCredentialRequest) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *NewCredentialRequest) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *NewCredentialRequest) GetRealm() *wrapperspb.StringValue {
	if x != nil {
		return x.Realm
	}
	return nil
}

func (x *NewCredentialRequest) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

type NewCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewCredentialResponse) Reset() {
	*x = NewCredentialResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCredentialResponse) ProtoMessage() {}

func (x *NewCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCredentialResponse.ProtoReflect.Descriptor instead.
func (*NewCredentialResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{12}
}

// --> NewChatMessage
type NewChatMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] сообщение
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *NewChatMessageRequest) Reset() {
	*x = NewChatMessageRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChatMessageRequest) ProtoMessage() {}

func (x *NewChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChatMessageRequest.ProtoReflect.Descriptor instead.
func (*NewChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{13}
}

func (x *NewChatMessageRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *NewChatMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NewChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewChatMessageResponse) Reset() {
	*x = NewChatMessageResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewChatMessageResponse) ProtoMessage() {}

func (x *NewChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewChatMessageResponse.ProtoReflect.Descriptor instead.
func (*NewChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{14}
}

// --> SetOperatorsColor
type SetOperatorsColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] список username'ов оператора
	Usernames []string `protobuf:"bytes,2,rep,name=usernames,proto3" json:"usernames,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет бикона
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetOperatorsColorRequest) Reset() {
	*x = SetOperatorsColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorsColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorsColorRequest) ProtoMessage() {}

func (x *SetOperatorsColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorsColorRequest.ProtoReflect.Descriptor instead.
func (*SetOperatorsColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{15}
}

func (x *SetOperatorsColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetOperatorsColorRequest) GetUsernames() []string {
	if x != nil {
		return x.Usernames
	}
	return nil
}

func (x *SetOperatorsColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetOperatorsColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOperatorsColorResponse) Reset() {
	*x = SetOperatorsColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorsColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorsColorResponse) ProtoMessage() {}

func (x *SetOperatorsColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorsColorResponse.ProtoReflect.Descriptor instead.
func (*SetOperatorsColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{16}
}

// --> SetOperatorColor
type SetOperatorColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] username оператора
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет бикона
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetOperatorColorRequest) Reset() {
	*x = SetOperatorColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorColorRequest) ProtoMessage() {}

func (x *SetOperatorColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorColorRequest.ProtoReflect.Descriptor instead.
func (*SetOperatorColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{17}
}

func (x *SetOperatorColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetOperatorColorRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SetOperatorColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetOperatorColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOperatorColorResponse) Reset() {
	*x = SetOperatorColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetOperatorColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperatorColorResponse) ProtoMessage() {}

func (x *SetOperatorColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperatorColorResponse.ProtoReflect.Descriptor instead.
func (*SetOperatorColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{18}
}

// --> SetListenerNote
type SetListenerNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] id листенера
	Lid int64 `protobuf:"varint,2,opt,name=lid,proto3" json:"lid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] заметка листенера
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SetListenerNoteRequest) Reset() {
	*x = SetListenerNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerNoteRequest) ProtoMessage() {}

func (x *SetListenerNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerNoteRequest.ProtoReflect.Descriptor instead.
func (*SetListenerNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{19}
}

func (x *SetListenerNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenerNoteRequest) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *SetListenerNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetListenerNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetListenerNoteResponse) Reset() {
	*x = SetListenerNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerNoteResponse) ProtoMessage() {}

func (x *SetListenerNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerNoteResponse.ProtoReflect.Descriptor instead.
func (*SetListenerNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{20}
}

// --> SetBeaconsNote
type SetBeaconsNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] список id биконов
	Bids []uint32 `protobuf:"varint,2,rep,packed,name=bids,proto3" json:"bids,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] заметка для установки
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SetBeaconsNoteRequest) Reset() {
	*x = SetBeaconsNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconsNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconsNoteRequest) ProtoMessage() {}

func (x *SetBeaconsNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconsNoteRequest.ProtoReflect.Descriptor instead.
func (*SetBeaconsNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{21}
}

func (x *SetBeaconsNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetBeaconsNoteRequest) GetBids() []uint32 {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *SetBeaconsNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetBeaconsNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBeaconsNoteResponse) Reset() {
	*x = SetBeaconsNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconsNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconsNoteResponse) ProtoMessage() {}

func (x *SetBeaconsNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconsNoteResponse.ProtoReflect.Descriptor instead.
func (*SetBeaconsNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{22}
}

// --> SetBeaconNote
type SetBeaconNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] id бикона
	Bid uint32 `protobuf:"varint,2,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] заметка бикона
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SetBeaconNoteRequest) Reset() {
	*x = SetBeaconNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconNoteRequest) ProtoMessage() {}

func (x *SetBeaconNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconNoteRequest.ProtoReflect.Descriptor instead.
func (*SetBeaconNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{23}
}

func (x *SetBeaconNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetBeaconNoteRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *SetBeaconNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetBeaconNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBeaconNoteResponse) Reset() {
	*x = SetBeaconNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconNoteResponse) ProtoMessage() {}

func (x *SetBeaconNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconNoteResponse.ProtoReflect.Descriptor instead.
func (*SetBeaconNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{24}
}

// --> SetBeaconsColor
type SetBeaconsColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНЛЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] список id биконов
	Bids []uint32 `protobuf:"varint,2,rep,packed,name=bids,proto3" json:"bids,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет биконов
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetBeaconsColorRequest) Reset() {
	*x = SetBeaconsColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconsColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconsColorRequest) ProtoMessage() {}

func (x *SetBeaconsColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconsColorRequest.ProtoReflect.Descriptor instead.
func (*SetBeaconsColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{25}
}

func (x *SetBeaconsColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetBeaconsColorRequest) GetBids() []uint32 {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *SetBeaconsColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetBeaconsColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBeaconsColorResponse) Reset() {
	*x = SetBeaconsColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconsColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconsColorResponse) ProtoMessage() {}

func (x *SetBeaconsColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconsColorResponse.ProtoReflect.Descriptor instead.
func (*SetBeaconsColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{26}
}

// --> SetBeaconColor
type SetBeaconColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] id бикона
	Bid uint32 `protobuf:"varint,2,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет бикона
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetBeaconColorRequest) Reset() {
	*x = SetBeaconColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconColorRequest) ProtoMessage() {}

func (x *SetBeaconColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconColorRequest.ProtoReflect.Descriptor instead.
func (*SetBeaconColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{27}
}

func (x *SetBeaconColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetBeaconColorRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *SetBeaconColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetBeaconColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBeaconColorResponse) Reset() {
	*x = SetBeaconColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetBeaconColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBeaconColorResponse) ProtoMessage() {}

func (x *SetBeaconColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBeaconColorResponse.ProtoReflect.Descriptor instead.
func (*SetBeaconColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{28}
}

// --> SetListenersNote
type SetListenersNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] список id листенеров
	Lids []int64 `protobuf:"varint,2,rep,packed,name=lids,proto3" json:"lids,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] заметка для листенеров
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SetListenersNoteRequest) Reset() {
	*x = SetListenersNoteRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersNoteRequest) ProtoMessage() {}

func (x *SetListenersNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersNoteRequest.ProtoReflect.Descriptor instead.
func (*SetListenersNoteRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{29}
}

func (x *SetListenersNoteRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenersNoteRequest) GetLids() []int64 {
	if x != nil {
		return x.Lids
	}
	return nil
}

func (x *SetListenersNoteRequest) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type SetListenersNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetListenersNoteResponse) Reset() {
	*x = SetListenersNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersNoteResponse) ProtoMessage() {}

func (x *SetListenersNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersNoteResponse.ProtoReflect.Descriptor instead.
func (*SetListenersNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{30}
}

// --> SetListenersColor
type SetListenersColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] список из id листенеров
	Lids []int64 `protobuf:"varint,2,rep,packed,name=lids,proto3" json:"lids,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет для листенеров
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetListenersColorRequest) Reset() {
	*x = SetListenersColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersColorRequest) ProtoMessage() {}

func (x *SetListenersColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersColorRequest.ProtoReflect.Descriptor instead.
func (*SetListenersColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{31}
}

func (x *SetListenersColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenersColorRequest) GetLids() []int64 {
	if x != nil {
		return x.Lids
	}
	return nil
}

func (x *SetListenersColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetListenersColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetListenersColorResponse) Reset() {
	*x = SetListenersColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenersColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenersColorResponse) ProtoMessage() {}

func (x *SetListenersColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenersColorResponse.ProtoReflect.Descriptor instead.
func (*SetListenersColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{32}
}

// --> SetListenerColor
type SetListenerColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] id листенера
	Lid int64 `protobuf:"varint,2,opt,name=lid,proto3" json:"lid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] цвет листенера
	Color uint32 `protobuf:"varint,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *SetListenerColorRequest) Reset() {
	*x = SetListenerColorRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerColorRequest) ProtoMessage() {}

func (x *SetListenerColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerColorRequest.ProtoReflect.Descriptor instead.
func (*SetListenerColorRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{33}
}

func (x *SetListenerColorRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *SetListenerColorRequest) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *SetListenerColorRequest) GetColor() uint32 {
	if x != nil {
		return x.Color
	}
	return 0
}

type SetListenerColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetListenerColorResponse) Reset() {
	*x = SetListenerColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetListenerColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetListenerColorResponse) ProtoMessage() {}

func (x *SetListenerColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetListenerColorResponse.ProtoReflect.Descriptor instead.
func (*SetListenerColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{34}
}

// --> Hello
type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] версия клиента
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{35}
}

func (x *HelloRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] username оператора
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] текущее время на сервере
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *HandshakeResponse) Reset() {
	*x = HandshakeResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandshakeResponse) ProtoMessage() {}

func (x *HandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandshakeResponse.ProtoReflect.Descriptor instead.
func (*HandshakeResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{36}
}

func (x *HandshakeResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *HandshakeResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HandshakeResponse) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*HelloResponse_Handshake
	//	*HelloResponse_Empty
	Response isHelloResponse_Response `protobuf_oneof:"response"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{37}
}

func (m *HelloResponse) GetResponse() isHelloResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *HelloResponse) GetHandshake() *HandshakeResponse {
	if x, ok := x.GetResponse().(*HelloResponse_Handshake); ok {
		return x.Handshake
	}
	return nil
}

func (x *HelloResponse) GetEmpty() *emptypb.Empty {
	if x, ok := x.GetResponse().(*HelloResponse_Empty); ok {
		return x.Empty
	}
	return nil
}

type isHelloResponse_Response interface {
	isHelloResponse_Response()
}

type HelloResponse_Handshake struct {
	Handshake *HandshakeResponse `protobuf:"bytes,1,opt,name=handshake,proto3,oneof"`
}

type HelloResponse_Empty struct {
	Empty *emptypb.Empty `protobuf:"bytes,2,opt,name=empty,proto3,oneof"`
}

func (*HelloResponse_Handshake) isHelloResponse_Response() {}

func (*HelloResponse_Empty) isHelloResponse_Response() {}

// --> SubscribeListeners
type SubscribeListenersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *SubscribeListenersRequest) Reset() {
	*x = SubscribeListenersRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeListenersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeListenersRequest) ProtoMessage() {}

func (x *SubscribeListenersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeListenersRequest.ProtoReflect.Descriptor instead.
func (*SubscribeListenersRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{38}
}

func (x *SubscribeListenersRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type ListenerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID листенера
	Lid int64 `protobuf:"varint,1,opt,name=lid,proto3" json:"lid,omitempty"`
	// имя листенера
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// IP адрес, на котором листенер слушает
	Ip *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// порт, на котором листенер слушает
	Port *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
	// цвет листенера
	Color *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	// заметка
	Note *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	// время последней активности
	Last *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *ListenerResponse) Reset() {
	*x = ListenerResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerResponse) ProtoMessage() {}

func (x *ListenerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerResponse.ProtoReflect.Descriptor instead.
func (*ListenerResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{39}
}

func (x *ListenerResponse) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *ListenerResponse) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListenerResponse) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *ListenerResponse) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

func (x *ListenerResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *ListenerResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *ListenerResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type ListenersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*ListenerResponse `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *ListenersResponse) Reset() {
	*x = ListenersResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenersResponse) ProtoMessage() {}

func (x *ListenersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenersResponse.ProtoReflect.Descriptor instead.
func (*ListenersResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{40}
}

func (x *ListenersResponse) GetListeners() []*ListenerResponse {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type ListenerColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID листенера
	Lid int64 `protobuf:"varint,1,opt,name=lid,proto3" json:"lid,omitempty"`
	// новый цвет листенера
	Color *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *ListenerColorResponse) Reset() {
	*x = ListenerColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerColorResponse) ProtoMessage() {}

func (x *ListenerColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerColorResponse.ProtoReflect.Descriptor instead.
func (*ListenerColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{41}
}

func (x *ListenerColorResponse) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *ListenerColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type ListenerNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID листенера
	Lid int64 `protobuf:"varint,1,opt,name=lid,proto3" json:"lid,omitempty"`
	// новая заметка листенера
	Note *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ListenerNoteResponse) Reset() {
	*x = ListenerNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerNoteResponse) ProtoMessage() {}

func (x *ListenerNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerNoteResponse.ProtoReflect.Descriptor instead.
func (*ListenerNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{42}
}

func (x *ListenerNoteResponse) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *ListenerNoteResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

type ListenerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID листенера
	Lid int64 `protobuf:"varint,1,opt,name=lid,proto3" json:"lid,omitempty"`
	// имя листенера
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// IP адрес, на котором листенер слушает
	Ip *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// порт, на котором листенер слушает
	Port *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ListenerInfoResponse) Reset() {
	*x = ListenerInfoResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerInfoResponse) ProtoMessage() {}

func (x *ListenerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerInfoResponse.ProtoReflect.Descriptor instead.
func (*ListenerInfoResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{43}
}

func (x *ListenerInfoResponse) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *ListenerInfoResponse) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListenerInfoResponse) GetIp() *wrapperspb.StringValue {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *ListenerInfoResponse) GetPort() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Port
	}
	return nil
}

type ListenerLastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID листенера
	Lid int64 `protobuf:"varint,1,opt,name=lid,proto3" json:"lid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] время последней активности
	Last *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *ListenerLastResponse) Reset() {
	*x = ListenerLastResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerLastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerLastResponse) ProtoMessage() {}

func (x *ListenerLastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerLastResponse.ProtoReflect.Descriptor instead.
func (*ListenerLastResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{44}
}

func (x *ListenerLastResponse) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *ListenerLastResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type SubscribeListenersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тип ответа
	//
	// Types that are assignable to Response:
	//
	//	*SubscribeListenersResponse_Listener
	//	*SubscribeListenersResponse_Color
	//	*SubscribeListenersResponse_Note
	//	*SubscribeListenersResponse_Info
	//	*SubscribeListenersResponse_Last
	//	*SubscribeListenersResponse_Listeners
	Response isSubscribeListenersResponse_Response `protobuf_oneof:"response"`
}

func (x *SubscribeListenersResponse) Reset() {
	*x = SubscribeListenersResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeListenersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeListenersResponse) ProtoMessage() {}

func (x *SubscribeListenersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeListenersResponse.ProtoReflect.Descriptor instead.
func (*SubscribeListenersResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{45}
}

func (m *SubscribeListenersResponse) GetResponse() isSubscribeListenersResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubscribeListenersResponse) GetListener() *ListenerResponse {
	if x, ok := x.GetResponse().(*SubscribeListenersResponse_Listener); ok {
		return x.Listener
	}
	return nil
}

func (x *SubscribeListenersResponse) GetColor() *ListenerColorResponse {
	if x, ok := x.GetResponse().(*SubscribeListenersResponse_Color); ok {
		return x.Color
	}
	return nil
}

func (x *SubscribeListenersResponse) GetNote() *ListenerNoteResponse {
	if x, ok := x.GetResponse().(*SubscribeListenersResponse_Note); ok {
		return x.Note
	}
	return nil
}

func (x *SubscribeListenersResponse) GetInfo() *ListenerInfoResponse {
	if x, ok := x.GetResponse().(*SubscribeListenersResponse_Info); ok {
		return x.Info
	}
	return nil
}

func (x *SubscribeListenersResponse) GetLast() *ListenerLastResponse {
	if x, ok := x.GetResponse().(*SubscribeListenersResponse_Last); ok {
		return x.Last
	}
	return nil
}

func (x *SubscribeListenersResponse) GetListeners() *ListenersResponse {
	if x, ok := x.GetResponse().(*SubscribeListenersResponse_Listeners); ok {
		return x.Listeners
	}
	return nil
}

type isSubscribeListenersResponse_Response interface {
	isSubscribeListenersResponse_Response()
}

type SubscribeListenersResponse_Listener struct {
	Listener *ListenerResponse `protobuf:"bytes,1,opt,name=listener,proto3,oneof"`
}

type SubscribeListenersResponse_Color struct {
	Color *ListenerColorResponse `protobuf:"bytes,2,opt,name=color,proto3,oneof"`
}

type SubscribeListenersResponse_Note struct {
	Note *ListenerNoteResponse `protobuf:"bytes,3,opt,name=note,proto3,oneof"`
}

type SubscribeListenersResponse_Info struct {
	Info *ListenerInfoResponse `protobuf:"bytes,4,opt,name=info,proto3,oneof"`
}

type SubscribeListenersResponse_Last struct {
	Last *ListenerLastResponse `protobuf:"bytes,5,opt,name=last,proto3,oneof"`
}

type SubscribeListenersResponse_Listeners struct {
	Listeners *ListenersResponse `protobuf:"bytes,6,opt,name=listeners,proto3,oneof"`
}

func (*SubscribeListenersResponse_Listener) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Color) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Note) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Info) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Last) isSubscribeListenersResponse_Response() {}

func (*SubscribeListenersResponse_Listeners) isSubscribeListenersResponse_Response() {}

// --> SubscribeBeacons
type SubscribeBeaconsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *SubscribeBeaconsRequest) Reset() {
	*x = SubscribeBeaconsRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeBeaconsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBeaconsRequest) ProtoMessage() {}

func (x *SubscribeBeaconsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBeaconsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBeaconsRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{46}
}

func (x *SubscribeBeaconsRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type BeaconResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] id бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] id листенера
	Lid int64 `protobuf:"varint,2,opt,name=lid,proto3" json:"lid,omitempty"`
	// внешний IP адрес бикона
	ExtIp *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ext_ip,json=extIp,proto3" json:"ext_ip,omitempty"`
	// внутренний IP адрес бикона
	IntIp *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=int_ip,json=intIp,proto3" json:"int_ip,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] тип операционной системы
	Os uint32 `protobuf:"varint,5,opt,name=os,proto3" json:"os,omitempty"`
	// метадата операционной системы
	OsMeta *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=os_meta,json=osMeta,proto3" json:"os_meta,omitempty"`
	// имя хоста, на котором работает бикон
	Hostname *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// имя пользователя, от которого работает процесс бикона
	Username *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	// домен, в котором живет хост
	Domain *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	// является ли процесс бикона привилегированным
	Privileged *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=privileged,proto3" json:"privileged,omitempty"`
	// имя процесса
	ProcName *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=proc_name,json=procName,proto3" json:"proc_name,omitempty"`
	// pid процесса
	Pid *wrapperspb.UInt32Value `protobuf:"bytes,12,opt,name=pid,proto3" json:"pid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] архитектура процесса
	Arch uint32 `protobuf:"varint,13,opt,name=arch,proto3" json:"arch,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] время sleep'a бикона
	Sleep uint32 `protobuf:"varint,14,opt,name=sleep,proto3" json:"sleep,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] jitter sleep'a
	Jitter uint32 `protobuf:"varint,15,opt,name=jitter,proto3" json:"jitter,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] капабилити бикона
	Caps uint32 `protobuf:"varint,16,opt,name=caps,proto3" json:"caps,omitempty"`
	// цвет бикона
	Color *wrapperspb.UInt32Value `protobuf:"bytes,17,opt,name=color,proto3" json:"color,omitempty"`
	// заметка
	Note *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=note,proto3" json:"note,omitempty"`
	// время первого чекина бикона
	First *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=first,proto3" json:"first,omitempty"`
	// время последнего чекина бикона
	Last *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *BeaconResponse) Reset() {
	*x = BeaconResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconResponse) ProtoMessage() {}

func (x *BeaconResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconResponse.ProtoReflect.Descriptor instead.
func (*BeaconResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{47}
}

func (x *BeaconResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *BeaconResponse) GetLid() int64 {
	if x != nil {
		return x.Lid
	}
	return 0
}

func (x *BeaconResponse) GetExtIp() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtIp
	}
	return nil
}

func (x *BeaconResponse) GetIntIp() *wrapperspb.StringValue {
	if x != nil {
		return x.IntIp
	}
	return nil
}

func (x *BeaconResponse) GetOs() uint32 {
	if x != nil {
		return x.Os
	}
	return 0
}

func (x *BeaconResponse) GetOsMeta() *wrapperspb.StringValue {
	if x != nil {
		return x.OsMeta
	}
	return nil
}

func (x *BeaconResponse) GetHostname() *wrapperspb.StringValue {
	if x != nil {
		return x.Hostname
	}
	return nil
}

func (x *BeaconResponse) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *BeaconResponse) GetDomain() *wrapperspb.StringValue {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *BeaconResponse) GetPrivileged() *wrapperspb.BoolValue {
	if x != nil {
		return x.Privileged
	}
	return nil
}

func (x *BeaconResponse) GetProcName() *wrapperspb.StringValue {
	if x != nil {
		return x.ProcName
	}
	return nil
}

func (x *BeaconResponse) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *BeaconResponse) GetArch() uint32 {
	if x != nil {
		return x.Arch
	}
	return 0
}

func (x *BeaconResponse) GetSleep() uint32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *BeaconResponse) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

func (x *BeaconResponse) GetCaps() uint32 {
	if x != nil {
		return x.Caps
	}
	return 0
}

func (x *BeaconResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *BeaconResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *BeaconResponse) GetFirst() *timestamppb.Timestamp {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *BeaconResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type BeaconsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beacons []*BeaconResponse `protobuf:"bytes,1,rep,name=beacons,proto3" json:"beacons,omitempty"`
}

func (x *BeaconsResponse) Reset() {
	*x = BeaconsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconsResponse) ProtoMessage() {}

func (x *BeaconsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconsResponse.ProtoReflect.Descriptor instead.
func (*BeaconsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{48}
}

func (x *BeaconsResponse) GetBeacons() []*BeaconResponse {
	if x != nil {
		return x.Beacons
	}
	return nil
}

type BeaconColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	// новый цвет бикона
	Color *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *BeaconColorResponse) Reset() {
	*x = BeaconColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconColorResponse) ProtoMessage() {}

func (x *BeaconColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconColorResponse.ProtoReflect.Descriptor instead.
func (*BeaconColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{49}
}

func (x *BeaconColorResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *BeaconColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type BeaconNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	// новая заметка бикона
	Note *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *BeaconNoteResponse) Reset() {
	*x = BeaconNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconNoteResponse) ProtoMessage() {}

func (x *BeaconNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconNoteResponse.ProtoReflect.Descriptor instead.
func (*BeaconNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{50}
}

func (x *BeaconNoteResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *BeaconNoteResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

type BeaconLastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	// обновленное время последнего чекаута
	Last *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *BeaconLastResponse) Reset() {
	*x = BeaconLastResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconLastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconLastResponse) ProtoMessage() {}

func (x *BeaconLastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconLastResponse.ProtoReflect.Descriptor instead.
func (*BeaconLastResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{51}
}

func (x *BeaconLastResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *BeaconLastResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type BeaconSleepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] время sleep'a бикона
	Sleep uint32 `protobuf:"varint,2,opt,name=sleep,proto3" json:"sleep,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] jitter sleep'a
	Jitter uint32 `protobuf:"varint,3,opt,name=jitter,proto3" json:"jitter,omitempty"`
}

func (x *BeaconSleepResponse) Reset() {
	*x = BeaconSleepResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BeaconSleepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconSleepResponse) ProtoMessage() {}

func (x *BeaconSleepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconSleepResponse.ProtoReflect.Descriptor instead.
func (*BeaconSleepResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{52}
}

func (x *BeaconSleepResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *BeaconSleepResponse) GetSleep() uint32 {
	if x != nil {
		return x.Sleep
	}
	return 0
}

func (x *BeaconSleepResponse) GetJitter() uint32 {
	if x != nil {
		return x.Jitter
	}
	return 0
}

type SubscribeBeaconsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тип ответа
	//
	// Types that are assignable to Response:
	//
	//	*SubscribeBeaconsResponse_Beacon
	//	*SubscribeBeaconsResponse_Color
	//	*SubscribeBeaconsResponse_Note
	//	*SubscribeBeaconsResponse_Last
	//	*SubscribeBeaconsResponse_Sleep
	//	*SubscribeBeaconsResponse_Beacons
	Response isSubscribeBeaconsResponse_Response `protobuf_oneof:"response"`
}

func (x *SubscribeBeaconsResponse) Reset() {
	*x = SubscribeBeaconsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeBeaconsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBeaconsResponse) ProtoMessage() {}

func (x *SubscribeBeaconsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBeaconsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeBeaconsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{53}
}

func (m *SubscribeBeaconsResponse) GetResponse() isSubscribeBeaconsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubscribeBeaconsResponse) GetBeacon() *BeaconResponse {
	if x, ok := x.GetResponse().(*SubscribeBeaconsResponse_Beacon); ok {
		return x.Beacon
	}
	return nil
}

func (x *SubscribeBeaconsResponse) GetColor() *BeaconColorResponse {
	if x, ok := x.GetResponse().(*SubscribeBeaconsResponse_Color); ok {
		return x.Color
	}
	return nil
}

func (x *SubscribeBeaconsResponse) GetNote() *BeaconNoteResponse {
	if x, ok := x.GetResponse().(*SubscribeBeaconsResponse_Note); ok {
		return x.Note
	}
	return nil
}

func (x *SubscribeBeaconsResponse) GetLast() *BeaconLastResponse {
	if x, ok := x.GetResponse().(*SubscribeBeaconsResponse_Last); ok {
		return x.Last
	}
	return nil
}

func (x *SubscribeBeaconsResponse) GetSleep() *BeaconSleepResponse {
	if x, ok := x.GetResponse().(*SubscribeBeaconsResponse_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *SubscribeBeaconsResponse) GetBeacons() *BeaconsResponse {
	if x, ok := x.GetResponse().(*SubscribeBeaconsResponse_Beacons); ok {
		return x.Beacons
	}
	return nil
}

type isSubscribeBeaconsResponse_Response interface {
	isSubscribeBeaconsResponse_Response()
}

type SubscribeBeaconsResponse_Beacon struct {
	Beacon *BeaconResponse `protobuf:"bytes,1,opt,name=beacon,proto3,oneof"`
}

type SubscribeBeaconsResponse_Color struct {
	Color *BeaconColorResponse `protobuf:"bytes,2,opt,name=color,proto3,oneof"`
}

type SubscribeBeaconsResponse_Note struct {
	Note *BeaconNoteResponse `protobuf:"bytes,3,opt,name=note,proto3,oneof"`
}

type SubscribeBeaconsResponse_Last struct {
	Last *BeaconLastResponse `protobuf:"bytes,4,opt,name=last,proto3,oneof"`
}

type SubscribeBeaconsResponse_Sleep struct {
	Sleep *BeaconSleepResponse `protobuf:"bytes,5,opt,name=sleep,proto3,oneof"`
}

type SubscribeBeaconsResponse_Beacons struct {
	Beacons *BeaconsResponse `protobuf:"bytes,6,opt,name=beacons,proto3,oneof"`
}

func (*SubscribeBeaconsResponse_Beacon) isSubscribeBeaconsResponse_Response() {}

func (*SubscribeBeaconsResponse_Color) isSubscribeBeaconsResponse_Response() {}

func (*SubscribeBeaconsResponse_Note) isSubscribeBeaconsResponse_Response() {}

func (*SubscribeBeaconsResponse_Last) isSubscribeBeaconsResponse_Response() {}

func (*SubscribeBeaconsResponse_Sleep) isSubscribeBeaconsResponse_Response() {}

func (*SubscribeBeaconsResponse_Beacons) isSubscribeBeaconsResponse_Response() {}

// --> SubscribeOperators
type SubscribeOperatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *SubscribeOperatorsRequest) Reset() {
	*x = SubscribeOperatorsRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOperatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOperatorsRequest) ProtoMessage() {}

func (x *SubscribeOperatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOperatorsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOperatorsRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{54}
}

func (x *SubscribeOperatorsRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type OperatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] username оператора
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// цвет оператора
	Color *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// время последней активности
	Last *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *OperatorResponse) Reset() {
	*x = OperatorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorResponse) ProtoMessage() {}

func (x *OperatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorResponse.ProtoReflect.Descriptor instead.
func (*OperatorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{55}
}

func (x *OperatorResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperatorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *OperatorResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type OperatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators []*OperatorResponse `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
}

func (x *OperatorsResponse) Reset() {
	*x = OperatorsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorsResponse) ProtoMessage() {}

func (x *OperatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorsResponse.ProtoReflect.Descriptor instead.
func (*OperatorsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{56}
}

func (x *OperatorsResponse) GetOperators() []*OperatorResponse {
	if x != nil {
		return x.Operators
	}
	return nil
}

type OperatorLastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] username оператора
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// время последней активности
	Last *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *OperatorLastResponse) Reset() {
	*x = OperatorLastResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorLastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorLastResponse) ProtoMessage() {}

func (x *OperatorLastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorLastResponse.ProtoReflect.Descriptor instead.
func (*OperatorLastResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{57}
}

func (x *OperatorLastResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperatorLastResponse) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

type OperatorColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] username оператора
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// новый цвет оператора
	Color *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *OperatorColorResponse) Reset() {
	*x = OperatorColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperatorColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorColorResponse) ProtoMessage() {}

func (x *OperatorColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorColorResponse.ProtoReflect.Descriptor instead.
func (*OperatorColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{58}
}

func (x *OperatorColorResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *OperatorColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type SubscribeOperatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тип ответа
	//
	// Types that are assignable to Response:
	//
	//	*SubscribeOperatorsResponse_Operator
	//	*SubscribeOperatorsResponse_Last
	//	*SubscribeOperatorsResponse_Color
	//	*SubscribeOperatorsResponse_Operators
	Response isSubscribeOperatorsResponse_Response `protobuf_oneof:"response"`
}

func (x *SubscribeOperatorsResponse) Reset() {
	*x = SubscribeOperatorsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOperatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOperatorsResponse) ProtoMessage() {}

func (x *SubscribeOperatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOperatorsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeOperatorsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{59}
}

func (m *SubscribeOperatorsResponse) GetResponse() isSubscribeOperatorsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetOperator() *OperatorResponse {
	if x, ok := x.GetResponse().(*SubscribeOperatorsResponse_Operator); ok {
		return x.Operator
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetLast() *OperatorLastResponse {
	if x, ok := x.GetResponse().(*SubscribeOperatorsResponse_Last); ok {
		return x.Last
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetColor() *OperatorColorResponse {
	if x, ok := x.GetResponse().(*SubscribeOperatorsResponse_Color); ok {
		return x.Color
	}
	return nil
}

func (x *SubscribeOperatorsResponse) GetOperators() *OperatorsResponse {
	if x, ok := x.GetResponse().(*SubscribeOperatorsResponse_Operators); ok {
		return x.Operators
	}
	return nil
}

type isSubscribeOperatorsResponse_Response interface {
	isSubscribeOperatorsResponse_Response()
}

type SubscribeOperatorsResponse_Operator struct {
	Operator *OperatorResponse `protobuf:"bytes,1,opt,name=operator,proto3,oneof"`
}

type SubscribeOperatorsResponse_Last struct {
	Last *OperatorLastResponse `protobuf:"bytes,2,opt,name=last,proto3,oneof"`
}

type SubscribeOperatorsResponse_Color struct {
	Color *OperatorColorResponse `protobuf:"bytes,3,opt,name=color,proto3,oneof"`
}

type SubscribeOperatorsResponse_Operators struct {
	Operators *OperatorsResponse `protobuf:"bytes,4,opt,name=operators,proto3,oneof"`
}

func (*SubscribeOperatorsResponse_Operator) isSubscribeOperatorsResponse_Response() {}

func (*SubscribeOperatorsResponse_Last) isSubscribeOperatorsResponse_Response() {}

func (*SubscribeOperatorsResponse_Color) isSubscribeOperatorsResponse_Response() {}

func (*SubscribeOperatorsResponse_Operators) isSubscribeOperatorsResponse_Response() {}

// --> SubscribeChat
type SubscribeChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *SubscribeChatRequest) Reset() {
	*x = SubscribeChatRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeChatRequest) ProtoMessage() {}

func (x *SubscribeChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeChatRequest.ProtoReflect.Descriptor instead.
func (*SubscribeChatRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{60}
}

func (x *SubscribeChatRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type ChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// время создания сообщения
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] кто создатель сообщения
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] сообщение
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{61}
}

func (x *ChatResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ChatResponse) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ChatResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ChatMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*ChatResponse `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ChatMessagesResponse) Reset() {
	*x = ChatMessagesResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessagesResponse) ProtoMessage() {}

func (x *ChatMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessagesResponse.ProtoReflect.Descriptor instead.
func (*ChatMessagesResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{62}
}

func (x *ChatMessagesResponse) GetMessages() []*ChatResponse {
	if x != nil {
		return x.Messages
	}
	return nil
}

type SubscribeChatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тип ответа
	//
	// Types that are assignable to Response:
	//
	//	*SubscribeChatResponse_Message
	//	*SubscribeChatResponse_Messages
	Response isSubscribeChatResponse_Response `protobuf_oneof:"response"`
}

func (x *SubscribeChatResponse) Reset() {
	*x = SubscribeChatResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeChatResponse) ProtoMessage() {}

func (x *SubscribeChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeChatResponse.ProtoReflect.Descriptor instead.
func (*SubscribeChatResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{63}
}

func (m *SubscribeChatResponse) GetResponse() isSubscribeChatResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubscribeChatResponse) GetMessage() *ChatResponse {
	if x, ok := x.GetResponse().(*SubscribeChatResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *SubscribeChatResponse) GetMessages() *ChatMessagesResponse {
	if x, ok := x.GetResponse().(*SubscribeChatResponse_Messages); ok {
		return x.Messages
	}
	return nil
}

type isSubscribeChatResponse_Response interface {
	isSubscribeChatResponse_Response()
}

type SubscribeChatResponse_Message struct {
	Message *ChatResponse `protobuf:"bytes,1,opt,name=message,proto3,oneof"`
}

type SubscribeChatResponse_Messages struct {
	Messages *ChatMessagesResponse `protobuf:"bytes,2,opt,name=messages,proto3,oneof"`
}

func (*SubscribeChatResponse_Message) isSubscribeChatResponse_Response() {}

func (*SubscribeChatResponse_Messages) isSubscribeChatResponse_Response() {}

// --> SubscribeCredentials
type SubscribeCredentialsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
}

func (x *SubscribeCredentialsRequest) Reset() {
	*x = SubscribeCredentialsRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeCredentialsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCredentialsRequest) ProtoMessage() {}

func (x *SubscribeCredentialsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCredentialsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCredentialsRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{64}
}

func (x *SubscribeCredentialsRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

type CredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID связки кредов
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// username
	Username *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// password
	Password *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	// realm
	Realm *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=realm,proto3" json:"realm,omitempty"`
	// host
	Host *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] время сохранения кредов в бд
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// заметка на кредлах
	Note *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	// цвет кредлов
	Color *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *CredentialResponse) Reset() {
	*x = CredentialResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialResponse) ProtoMessage() {}

func (x *CredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialResponse.ProtoReflect.Descriptor instead.
func (*CredentialResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{65}
}

func (x *CredentialResponse) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CredentialResponse) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *CredentialResponse) GetPassword() *wrapperspb.StringValue {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *CredentialResponse) GetRealm() *wrapperspb.StringValue {
	if x != nil {
		return x.Realm
	}
	return nil
}

func (x *CredentialResponse) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *CredentialResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CredentialResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *CredentialResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type CredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*CredentialResponse `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (x *CredentialsResponse) Reset() {
	*x = CredentialsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialsResponse) ProtoMessage() {}

func (x *CredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialsResponse.ProtoReflect.Descriptor instead.
func (*CredentialsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{66}
}

func (x *CredentialsResponse) GetCredentials() []*CredentialResponse {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type CredentialColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID кредов
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// новый цвет у кредов
	Color *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *CredentialColorResponse) Reset() {
	*x = CredentialColorResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialColorResponse) ProtoMessage() {}

func (x *CredentialColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialColorResponse.ProtoReflect.Descriptor instead.
func (*CredentialColorResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{67}
}

func (x *CredentialColorResponse) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CredentialColorResponse) GetColor() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Color
	}
	return nil
}

type CredentialNoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID кредов
	Cid int64 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// новая заметка для кредов
	Note *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *CredentialNoteResponse) Reset() {
	*x = CredentialNoteResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialNoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialNoteResponse) ProtoMessage() {}

func (x *CredentialNoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialNoteResponse.ProtoReflect.Descriptor instead.
func (*CredentialNoteResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{68}
}

func (x *CredentialNoteResponse) GetCid() int64 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CredentialNoteResponse) GetNote() *wrapperspb.StringValue {
	if x != nil {
		return x.Note
	}
	return nil
}

type SubscribeCredentialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// тип ответа
	//
	// Types that are assignable to Response:
	//
	//	*SubscribeCredentialsResponse_Credential
	//	*SubscribeCredentialsResponse_Color
	//	*SubscribeCredentialsResponse_Note
	//	*SubscribeCredentialsResponse_Credentials
	Response isSubscribeCredentialsResponse_Response `protobuf_oneof:"response"`
}

func (x *SubscribeCredentialsResponse) Reset() {
	*x = SubscribeCredentialsResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCredentialsResponse) ProtoMessage() {}

func (x *SubscribeCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCredentialsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{69}
}

func (m *SubscribeCredentialsResponse) GetResponse() isSubscribeCredentialsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetCredential() *CredentialResponse {
	if x, ok := x.GetResponse().(*SubscribeCredentialsResponse_Credential); ok {
		return x.Credential
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetColor() *CredentialColorResponse {
	if x, ok := x.GetResponse().(*SubscribeCredentialsResponse_Color); ok {
		return x.Color
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetNote() *CredentialNoteResponse {
	if x, ok := x.GetResponse().(*SubscribeCredentialsResponse_Note); ok {
		return x.Note
	}
	return nil
}

func (x *SubscribeCredentialsResponse) GetCredentials() *CredentialsResponse {
	if x, ok := x.GetResponse().(*SubscribeCredentialsResponse_Credentials); ok {
		return x.Credentials
	}
	return nil
}

type isSubscribeCredentialsResponse_Response interface {
	isSubscribeCredentialsResponse_Response()
}

type SubscribeCredentialsResponse_Credential struct {
	Credential *CredentialResponse `protobuf:"bytes,1,opt,name=credential,proto3,oneof"`
}

type SubscribeCredentialsResponse_Color struct {
	Color *CredentialColorResponse `protobuf:"bytes,2,opt,name=color,proto3,oneof"`
}

type SubscribeCredentialsResponse_Note struct {
	Note *CredentialNoteResponse `protobuf:"bytes,3,opt,name=note,proto3,oneof"`
}

type SubscribeCredentialsResponse_Credentials struct {
	Credentials *CredentialsResponse `protobuf:"bytes,4,opt,name=credentials,proto3,oneof"`
}

func (*SubscribeCredentialsResponse_Credential) isSubscribeCredentialsResponse_Response() {}

func (*SubscribeCredentialsResponse_Color) isSubscribeCredentialsResponse_Response() {}

func (*SubscribeCredentialsResponse_Note) isSubscribeCredentialsResponse_Response() {}

func (*SubscribeCredentialsResponse_Credentials) isSubscribeCredentialsResponse_Response() {}

// --> NewGroup
type NewGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Types that are assignable to Type:
	//
	//	*NewGroupRequest_Group
	//	*NewGroupRequest_Message
	//	*NewGroupRequest_Task
	Type isNewGroupRequest_Type `protobuf_oneof:"type"`
}

func (x *NewGroupRequest) Reset() {
	*x = NewGroupRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGroupRequest) ProtoMessage() {}

func (x *NewGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGroupRequest.ProtoReflect.Descriptor instead.
func (*NewGroupRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{70}
}

func (x *NewGroupRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (m *NewGroupRequest) GetType() isNewGroupRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *NewGroupRequest) GetGroup() *NewTaskGroupRequest {
	if x, ok := x.GetType().(*NewGroupRequest_Group); ok {
		return x.Group
	}
	return nil
}

func (x *NewGroupRequest) GetMessage() *NewTaskMessageRequest {
	if x, ok := x.GetType().(*NewGroupRequest_Message); ok {
		return x.Message
	}
	return nil
}

func (x *NewGroupRequest) GetTask() *NewTaskRequest {
	if x, ok := x.GetType().(*NewGroupRequest_Task); ok {
		return x.Task
	}
	return nil
}

type isNewGroupRequest_Type interface {
	isNewGroupRequest_Type()
}

type NewGroupRequest_Group struct {
	Group *NewTaskGroupRequest `protobuf:"bytes,2,opt,name=group,proto3,oneof"`
}

type NewGroupRequest_Message struct {
	Message *NewTaskMessageRequest `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

type NewGroupRequest_Task struct {
	Task *NewTaskRequest `protobuf:"bytes,4,opt,name=task,proto3,oneof"`
}

func (*NewGroupRequest_Group) isNewGroupRequest_Type() {}

func (*NewGroupRequest_Message) isNewGroupRequest_Type() {}

func (*NewGroupRequest_Task) isNewGroupRequest_Type() {}

type NewTaskGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] строка с командой
	Cmd string `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] будет ли видна группа другим операторам
	Visible bool `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
}

func (x *NewTaskGroupRequest) Reset() {
	*x = NewTaskGroupRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTaskGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTaskGroupRequest) ProtoMessage() {}

func (x *NewTaskGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTaskGroupRequest.ProtoReflect.Descriptor instead.
func (*NewTaskGroupRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{71}
}

func (x *NewTaskGroupRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *NewTaskGroupRequest) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *NewTaskGroupRequest) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

type NewTaskMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] тип сообщения
	Type uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] сообщение
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *NewTaskMessageRequest) Reset() {
	*x = NewTaskMessageRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTaskMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTaskMessageRequest) ProtoMessage() {}

func (x *NewTaskMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTaskMessageRequest.ProtoReflect.Descriptor instead.
func (*NewTaskMessageRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{72}
}

func (x *NewTaskMessageRequest) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NewTaskMessageRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type NewTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] значение капабилити
	Cap uint32 `protobuf:"varint,1,opt,name=cap,proto3" json:"cap,omitempty"`
	// Types that are assignable to Args:
	//
	//	*NewTaskRequest_Sleep
	//	*NewTaskRequest_Ls
	//	*NewTaskRequest_Pwd
	//	*NewTaskRequest_Cd
	//	*NewTaskRequest_Whoami
	//	*NewTaskRequest_Ps
	//	*NewTaskRequest_Cat
	//	*NewTaskRequest_Exec
	//	*NewTaskRequest_Cp
	//	*NewTaskRequest_Jobs
	//	*NewTaskRequest_Jobkill
	//	*NewTaskRequest_Kill
	//	*NewTaskRequest_Mv
	//	*NewTaskRequest_Mkdir
	//	*NewTaskRequest_Rm
	//	*NewTaskRequest_ExecAssembly
	//	*NewTaskRequest_ShellcodeInjection
	//	*NewTaskRequest_Download
	//	*NewTaskRequest_Upload
	//	*NewTaskRequest_Pause
	//	*NewTaskRequest_Destruct
	//	*NewTaskRequest_ExecDetach
	//	*NewTaskRequest_Shell
	//	*NewTaskRequest_Ppid
	//	*NewTaskRequest_Exit
	Args isNewTaskRequest_Args `protobuf_oneof:"args"`
}

func (x *NewTaskRequest) Reset() {
	*x = NewTaskRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTaskRequest) ProtoMessage() {}

func (x *NewTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTaskRequest.ProtoReflect.Descriptor instead.
func (*NewTaskRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{73}
}

func (x *NewTaskRequest) GetCap() uint32 {
	if x != nil {
		return x.Cap
	}
	return 0
}

func (m *NewTaskRequest) GetArgs() isNewTaskRequest_Args {
	if m != nil {
		return m.Args
	}
	return nil
}

func (x *NewTaskRequest) GetSleep() *v1.CapSleep {
	if x, ok := x.GetArgs().(*NewTaskRequest_Sleep); ok {
		return x.Sleep
	}
	return nil
}

func (x *NewTaskRequest) GetLs() *v1.CapLs {
	if x, ok := x.GetArgs().(*NewTaskRequest_Ls); ok {
		return x.Ls
	}
	return nil
}

func (x *NewTaskRequest) GetPwd() *v1.CapPwd {
	if x, ok := x.GetArgs().(*NewTaskRequest_Pwd); ok {
		return x.Pwd
	}
	return nil
}

func (x *NewTaskRequest) GetCd() *v1.CapCd {
	if x, ok := x.GetArgs().(*NewTaskRequest_Cd); ok {
		return x.Cd
	}
	return nil
}

func (x *NewTaskRequest) GetWhoami() *v1.CapWhoami {
	if x, ok := x.GetArgs().(*NewTaskRequest_Whoami); ok {
		return x.Whoami
	}
	return nil
}

func (x *NewTaskRequest) GetPs() *v1.CapPs {
	if x, ok := x.GetArgs().(*NewTaskRequest_Ps); ok {
		return x.Ps
	}
	return nil
}

func (x *NewTaskRequest) GetCat() *v1.CapCat {
	if x, ok := x.GetArgs().(*NewTaskRequest_Cat); ok {
		return x.Cat
	}
	return nil
}

func (x *NewTaskRequest) GetExec() *v1.CapExec {
	if x, ok := x.GetArgs().(*NewTaskRequest_Exec); ok {
		return x.Exec
	}
	return nil
}

func (x *NewTaskRequest) GetCp() *v1.CapCp {
	if x, ok := x.GetArgs().(*NewTaskRequest_Cp); ok {
		return x.Cp
	}
	return nil
}

func (x *NewTaskRequest) GetJobs() *v1.CapJobs {
	if x, ok := x.GetArgs().(*NewTaskRequest_Jobs); ok {
		return x.Jobs
	}
	return nil
}

func (x *NewTaskRequest) GetJobkill() *v1.CapJobkill {
	if x, ok := x.GetArgs().(*NewTaskRequest_Jobkill); ok {
		return x.Jobkill
	}
	return nil
}

func (x *NewTaskRequest) GetKill() *v1.CapKill {
	if x, ok := x.GetArgs().(*NewTaskRequest_Kill); ok {
		return x.Kill
	}
	return nil
}

func (x *NewTaskRequest) GetMv() *v1.CapMv {
	if x, ok := x.GetArgs().(*NewTaskRequest_Mv); ok {
		return x.Mv
	}
	return nil
}

func (x *NewTaskRequest) GetMkdir() *v1.CapMkdir {
	if x, ok := x.GetArgs().(*NewTaskRequest_Mkdir); ok {
		return x.Mkdir
	}
	return nil
}

func (x *NewTaskRequest) GetRm() *v1.CapRm {
	if x, ok := x.GetArgs().(*NewTaskRequest_Rm); ok {
		return x.Rm
	}
	return nil
}

func (x *NewTaskRequest) GetExecAssembly() *v1.CapExecAssembly {
	if x, ok := x.GetArgs().(*NewTaskRequest_ExecAssembly); ok {
		return x.ExecAssembly
	}
	return nil
}

func (x *NewTaskRequest) GetShellcodeInjection() *v1.CapShellcodeInjection {
	if x, ok := x.GetArgs().(*NewTaskRequest_ShellcodeInjection); ok {
		return x.ShellcodeInjection
	}
	return nil
}

func (x *NewTaskRequest) GetDownload() *v1.CapDownload {
	if x, ok := x.GetArgs().(*NewTaskRequest_Download); ok {
		return x.Download
	}
	return nil
}

func (x *NewTaskRequest) GetUpload() *v1.CapUpload {
	if x, ok := x.GetArgs().(*NewTaskRequest_Upload); ok {
		return x.Upload
	}
	return nil
}

func (x *NewTaskRequest) GetPause() *v1.CapPause {
	if x, ok := x.GetArgs().(*NewTaskRequest_Pause); ok {
		return x.Pause
	}
	return nil
}

func (x *NewTaskRequest) GetDestruct() *v1.CapDestruct {
	if x, ok := x.GetArgs().(*NewTaskRequest_Destruct); ok {
		return x.Destruct
	}
	return nil
}

func (x *NewTaskRequest) GetExecDetach() *v1.CapExecDetach {
	if x, ok := x.GetArgs().(*NewTaskRequest_ExecDetach); ok {
		return x.ExecDetach
	}
	return nil
}

func (x *NewTaskRequest) GetShell() *v1.CapShell {
	if x, ok := x.GetArgs().(*NewTaskRequest_Shell); ok {
		return x.Shell
	}
	return nil
}

func (x *NewTaskRequest) GetPpid() *v1.CapPpid {
	if x, ok := x.GetArgs().(*NewTaskRequest_Ppid); ok {
		return x.Ppid
	}
	return nil
}

func (x *NewTaskRequest) GetExit() *v1.CapExit {
	if x, ok := x.GetArgs().(*NewTaskRequest_Exit); ok {
		return x.Exit
	}
	return nil
}

type isNewTaskRequest_Args interface {
	isNewTaskRequest_Args()
}

type NewTaskRequest_Sleep struct {
	Sleep *v1.CapSleep `protobuf:"bytes,2,opt,name=sleep,proto3,oneof"`
}

type NewTaskRequest_Ls struct {
	Ls *v1.CapLs `protobuf:"bytes,3,opt,name=ls,proto3,oneof"`
}

type NewTaskRequest_Pwd struct {
	Pwd *v1.CapPwd `protobuf:"bytes,4,opt,name=pwd,proto3,oneof"`
}

type NewTaskRequest_Cd struct {
	Cd *v1.CapCd `protobuf:"bytes,5,opt,name=cd,proto3,oneof"`
}

type NewTaskRequest_Whoami struct {
	Whoami *v1.CapWhoami `protobuf:"bytes,6,opt,name=whoami,proto3,oneof"`
}

type NewTaskRequest_Ps struct {
	Ps *v1.CapPs `protobuf:"bytes,7,opt,name=ps,proto3,oneof"`
}

type NewTaskRequest_Cat struct {
	Cat *v1.CapCat `protobuf:"bytes,8,opt,name=cat,proto3,oneof"`
}

type NewTaskRequest_Exec struct {
	Exec *v1.CapExec `protobuf:"bytes,9,opt,name=exec,proto3,oneof"`
}

type NewTaskRequest_Cp struct {
	Cp *v1.CapCp `protobuf:"bytes,10,opt,name=cp,proto3,oneof"`
}

type NewTaskRequest_Jobs struct {
	Jobs *v1.CapJobs `protobuf:"bytes,11,opt,name=jobs,proto3,oneof"`
}

type NewTaskRequest_Jobkill struct {
	Jobkill *v1.CapJobkill `protobuf:"bytes,12,opt,name=jobkill,proto3,oneof"`
}

type NewTaskRequest_Kill struct {
	Kill *v1.CapKill `protobuf:"bytes,13,opt,name=kill,proto3,oneof"`
}

type NewTaskRequest_Mv struct {
	Mv *v1.CapMv `protobuf:"bytes,14,opt,name=mv,proto3,oneof"`
}

type NewTaskRequest_Mkdir struct {
	Mkdir *v1.CapMkdir `protobuf:"bytes,15,opt,name=mkdir,proto3,oneof"`
}

type NewTaskRequest_Rm struct {
	Rm *v1.CapRm `protobuf:"bytes,16,opt,name=rm,proto3,oneof"`
}

type NewTaskRequest_ExecAssembly struct {
	ExecAssembly *v1.CapExecAssembly `protobuf:"bytes,17,opt,name=exec_assembly,json=execAssembly,proto3,oneof"`
}

type NewTaskRequest_ShellcodeInjection struct {
	ShellcodeInjection *v1.CapShellcodeInjection `protobuf:"bytes,18,opt,name=shellcode_injection,json=shellcodeInjection,proto3,oneof"`
}

type NewTaskRequest_Download struct {
	Download *v1.CapDownload `protobuf:"bytes,19,opt,name=download,proto3,oneof"`
}

type NewTaskRequest_Upload struct {
	Upload *v1.CapUpload `protobuf:"bytes,20,opt,name=upload,proto3,oneof"`
}

type NewTaskRequest_Pause struct {
	Pause *v1.CapPause `protobuf:"bytes,21,opt,name=pause,proto3,oneof"`
}

type NewTaskRequest_Destruct struct {
	Destruct *v1.CapDestruct `protobuf:"bytes,22,opt,name=destruct,proto3,oneof"`
}

type NewTaskRequest_ExecDetach struct {
	ExecDetach *v1.CapExecDetach `protobuf:"bytes,23,opt,name=exec_detach,json=execDetach,proto3,oneof"`
}

type NewTaskRequest_Shell struct {
	Shell *v1.CapShell `protobuf:"bytes,24,opt,name=shell,proto3,oneof"`
}

type NewTaskRequest_Ppid struct {
	Ppid *v1.CapPpid `protobuf:"bytes,25,opt,name=ppid,proto3,oneof"`
}

type NewTaskRequest_Exit struct {
	Exit *v1.CapExit `protobuf:"bytes,26,opt,name=exit,proto3,oneof"`
}

func (*NewTaskRequest_Sleep) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Ls) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Pwd) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Cd) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Whoami) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Ps) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Cat) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Exec) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Cp) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Jobs) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Jobkill) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Kill) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Mv) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Mkdir) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Rm) isNewTaskRequest_Args() {}

func (*NewTaskRequest_ExecAssembly) isNewTaskRequest_Args() {}

func (*NewTaskRequest_ShellcodeInjection) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Download) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Upload) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Pause) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Destruct) isNewTaskRequest_Args() {}

func (*NewTaskRequest_ExecDetach) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Shell) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Ppid) isNewTaskRequest_Args() {}

func (*NewTaskRequest_Exit) isNewTaskRequest_Args() {}

type NewGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewGroupResponse) Reset() {
	*x = NewGroupResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewGroupResponse) ProtoMessage() {}

func (x *NewGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewGroupResponse.ProtoReflect.Descriptor instead.
func (*NewGroupResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{74}
}

// --> SubscribeTasks
type SubscribeTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// Types that are assignable to Type:
	//
	//	*SubscribeTasksRequest_Hello
	//	*SubscribeTasksRequest_Start
	//	*SubscribeTasksRequest_Stop
	Type isSubscribeTasksRequest_Type `protobuf_oneof:"type"`
}

func (x *SubscribeTasksRequest) Reset() {
	*x = SubscribeTasksRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTasksRequest) ProtoMessage() {}

func (x *SubscribeTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTasksRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTasksRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{75}
}

func (x *SubscribeTasksRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (m *SubscribeTasksRequest) GetType() isSubscribeTasksRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SubscribeTasksRequest) GetHello() *SubscribeTasksHelloRequest {
	if x, ok := x.GetType().(*SubscribeTasksRequest_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *SubscribeTasksRequest) GetStart() *StartPollBeaconRequest {
	if x, ok := x.GetType().(*SubscribeTasksRequest_Start); ok {
		return x.Start
	}
	return nil
}

func (x *SubscribeTasksRequest) GetStop() *StopPollBeaconRequest {
	if x, ok := x.GetType().(*SubscribeTasksRequest_Stop); ok {
		return x.Stop
	}
	return nil
}

type isSubscribeTasksRequest_Type interface {
	isSubscribeTasksRequest_Type()
}

type SubscribeTasksRequest_Hello struct {
	Hello *SubscribeTasksHelloRequest `protobuf:"bytes,2,opt,name=hello,proto3,oneof"`
}

type SubscribeTasksRequest_Start struct {
	Start *StartPollBeaconRequest `protobuf:"bytes,3,opt,name=start,proto3,oneof"`
}

type SubscribeTasksRequest_Stop struct {
	Stop *StopPollBeaconRequest `protobuf:"bytes,4,opt,name=stop,proto3,oneof"`
}

func (*SubscribeTasksRequest_Hello) isSubscribeTasksRequest_Type() {}

func (*SubscribeTasksRequest_Start) isSubscribeTasksRequest_Type() {}

func (*SubscribeTasksRequest_Stop) isSubscribeTasksRequest_Type() {}

type SubscribeTasksHelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscribeTasksHelloRequest) Reset() {
	*x = SubscribeTasksHelloRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTasksHelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTasksHelloRequest) ProtoMessage() {}

func (x *SubscribeTasksHelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTasksHelloRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTasksHelloRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{76}
}

type StartPollBeaconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *StartPollBeaconRequest) Reset() {
	*x = StartPollBeaconRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartPollBeaconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPollBeaconRequest) ProtoMessage() {}

func (x *StartPollBeaconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPollBeaconRequest.ProtoReflect.Descriptor instead.
func (*StartPollBeaconRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{77}
}

func (x *StartPollBeaconRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

type StopPollBeaconRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (x *StopPollBeaconRequest) Reset() {
	*x = StopPollBeaconRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopPollBeaconRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPollBeaconRequest) ProtoMessage() {}

func (x *StopPollBeaconRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPollBeaconRequest.ProtoReflect.Descriptor instead.
func (*StopPollBeaconRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{78}
}

func (x *StopPollBeaconRequest) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

type TasksGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID группы
	Gid int64 `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,2,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] команда
	Cmd string `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] автора группы
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] является ли группа видимой для других операторов
	Visible bool `protobuf:"varint,5,opt,name=visible,proto3" json:"visible,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] когда группа создана
	Created *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *TasksGroupResponse) Reset() {
	*x = TasksGroupResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TasksGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksGroupResponse) ProtoMessage() {}

func (x *TasksGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksGroupResponse.ProtoReflect.Descriptor instead.
func (*TasksGroupResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{79}
}

func (x *TasksGroupResponse) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TasksGroupResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *TasksGroupResponse) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *TasksGroupResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *TasksGroupResponse) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *TasksGroupResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type TasksMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID группы
	Gid int64 `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID сообщения
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,3,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] тип сообщения
	Type uint32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] сообщение
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] когда создано
	Created *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *TasksMessageResponse) Reset() {
	*x = TasksMessageResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TasksMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksMessageResponse) ProtoMessage() {}

func (x *TasksMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksMessageResponse.ProtoReflect.Descriptor instead.
func (*TasksMessageResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{80}
}

func (x *TasksMessageResponse) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TasksMessageResponse) GetMid() int64 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *TasksMessageResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *TasksMessageResponse) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TasksMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TasksMessageResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type TasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID группы
	Gid int64 `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID таска
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,3,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] статус таска
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// результат таска
	Output *wrapperspb.BytesValue `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] размер результата таска
	OutputLen int64 `protobuf:"varint,6,opt,name=output_len,json=outputLen,proto3" json:"output_len,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] является ли результат слишком большим
	OutputBig bool `protobuf:"varint,7,opt,name=output_big,json=outputBig,proto3" json:"output_big,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] когда создан
	Created *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *TasksResponse) Reset() {
	*x = TasksResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksResponse) ProtoMessage() {}

func (x *TasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksResponse.ProtoReflect.Descriptor instead.
func (*TasksResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{81}
}

func (x *TasksResponse) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TasksResponse) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *TasksResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *TasksResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TasksResponse) GetOutput() *wrapperspb.BytesValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TasksResponse) GetOutputLen() int64 {
	if x != nil {
		return x.OutputLen
	}
	return 0
}

func (x *TasksResponse) GetOutputBig() bool {
	if x != nil {
		return x.OutputBig
	}
	return false
}

func (x *TasksResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type TasksStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID группы
	Gid int64 `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID таска
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,3,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] статус таска
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TasksStatusResponse) Reset() {
	*x = TasksStatusResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TasksStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksStatusResponse) ProtoMessage() {}

func (x *TasksStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksStatusResponse.ProtoReflect.Descriptor instead.
func (*TasksStatusResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{82}
}

func (x *TasksStatusResponse) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TasksStatusResponse) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *TasksStatusResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *TasksStatusResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type TasksDoneResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] ID группы
	Gid int64 `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID таска
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] ID бикона
	Bid uint32 `protobuf:"varint,3,opt,name=bid,proto3" json:"bid,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] статус таска
	Status uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// результат таска
	Output *wrapperspb.BytesValue `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] размер результата таска
	OutputLen int64 `protobuf:"varint,6,opt,name=output_len,json=outputLen,proto3" json:"output_len,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] является ли результат слишком большим
	OutputBig bool `protobuf:"varint,7,opt,name=output_big,json=outputBig,proto3" json:"output_big,omitempty"`
}

func (x *TasksDoneResponse) Reset() {
	*x = TasksDoneResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TasksDoneResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TasksDoneResponse) ProtoMessage() {}

func (x *TasksDoneResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TasksDoneResponse.ProtoReflect.Descriptor instead.
func (*TasksDoneResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{83}
}

func (x *TasksDoneResponse) GetGid() int64 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TasksDoneResponse) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *TasksDoneResponse) GetBid() uint32 {
	if x != nil {
		return x.Bid
	}
	return 0
}

func (x *TasksDoneResponse) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TasksDoneResponse) GetOutput() *wrapperspb.BytesValue {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TasksDoneResponse) GetOutputLen() int64 {
	if x != nil {
		return x.OutputLen
	}
	return 0
}

func (x *TasksDoneResponse) GetOutputBig() bool {
	if x != nil {
		return x.OutputBig
	}
	return false
}

type SubscribeTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SubscribeTasksResponse_Group
	//	*SubscribeTasksResponse_Message
	//	*SubscribeTasksResponse_Task
	//	*SubscribeTasksResponse_TaskStatus
	//	*SubscribeTasksResponse_TaskDone
	Type isSubscribeTasksResponse_Type `protobuf_oneof:"type"`
}

func (x *SubscribeTasksResponse) Reset() {
	*x = SubscribeTasksResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTasksResponse) ProtoMessage() {}

func (x *SubscribeTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTasksResponse.ProtoReflect.Descriptor instead.
func (*SubscribeTasksResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{84}
}

func (m *SubscribeTasksResponse) GetType() isSubscribeTasksResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SubscribeTasksResponse) GetGroup() *TasksGroupResponse {
	if x, ok := x.GetType().(*SubscribeTasksResponse_Group); ok {
		return x.Group
	}
	return nil
}

func (x *SubscribeTasksResponse) GetMessage() *TasksMessageResponse {
	if x, ok := x.GetType().(*SubscribeTasksResponse_Message); ok {
		return x.Message
	}
	return nil
}

func (x *SubscribeTasksResponse) GetTask() *TasksResponse {
	if x, ok := x.GetType().(*SubscribeTasksResponse_Task); ok {
		return x.Task
	}
	return nil
}

func (x *SubscribeTasksResponse) GetTaskStatus() *TasksStatusResponse {
	if x, ok := x.GetType().(*SubscribeTasksResponse_TaskStatus); ok {
		return x.TaskStatus
	}
	return nil
}

func (x *SubscribeTasksResponse) GetTaskDone() *TasksDoneResponse {
	if x, ok := x.GetType().(*SubscribeTasksResponse_TaskDone); ok {
		return x.TaskDone
	}
	return nil
}

type isSubscribeTasksResponse_Type interface {
	isSubscribeTasksResponse_Type()
}

type SubscribeTasksResponse_Group struct {
	Group *TasksGroupResponse `protobuf:"bytes,1,opt,name=group,proto3,oneof"`
}

type SubscribeTasksResponse_Message struct {
	Message *TasksMessageResponse `protobuf:"bytes,2,opt,name=message,proto3,oneof"`
}

type SubscribeTasksResponse_Task struct {
	Task *TasksResponse `protobuf:"bytes,3,opt,name=task,proto3,oneof"`
}

type SubscribeTasksResponse_TaskStatus struct {
	TaskStatus *TasksStatusResponse `protobuf:"bytes,4,opt,name=task_status,json=taskStatus,proto3,oneof"`
}

type SubscribeTasksResponse_TaskDone struct {
	TaskDone *TasksDoneResponse `protobuf:"bytes,5,opt,name=task_done,json=taskDone,proto3,oneof"`
}

func (*SubscribeTasksResponse_Group) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_Message) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_Task) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_TaskStatus) isSubscribeTasksResponse_Type() {}

func (*SubscribeTasksResponse_TaskDone) isSubscribeTasksResponse_Type() {}

// --> GetTaskOutput
type GetTaskOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [ОБЯЗАТЕЛЬНОЕ] сессионная кука
	Cookie *SessionCookie `protobuf:"bytes,1,opt,name=cookie,proto3" json:"cookie,omitempty"`
	// [ОБЯЗАТЕЛЬНОЕ] task ID
	Tid int64 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
}

func (x *GetTaskOutputRequest) Reset() {
	*x = GetTaskOutputRequest{}
	mi := &file_operator_v1_operator_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskOutputRequest) ProtoMessage() {}

func (x *GetTaskOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskOutputRequest.ProtoReflect.Descriptor instead.
func (*GetTaskOutputRequest) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{85}
}

func (x *GetTaskOutputRequest) GetCookie() *SessionCookie {
	if x != nil {
		return x.Cookie
	}
	return nil
}

func (x *GetTaskOutputRequest) GetTid() int64 {
	if x != nil {
		return x.Tid
	}
	return 0
}

type GetTaskOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// результат таска
	Output *wrapperspb.BytesValue `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GetTaskOutputResponse) Reset() {
	*x = GetTaskOutputResponse{}
	mi := &file_operator_v1_operator_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskOutputResponse) ProtoMessage() {}

func (x *GetTaskOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_operator_v1_operator_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskOutputResponse.ProtoReflect.Descriptor instead.
func (*GetTaskOutputResponse) Descriptor() ([]byte, []int) {
	return file_operator_v1_operator_proto_rawDescGZIP(), []int{86}
}

func (x *GetTaskOutputResponse) GetOutput() *wrapperspb.BytesValue {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_operator_v1_operator_proto protoreflect.FileDescriptor

var file_operator_v1_operator_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x25, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62,
	0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x19, 0x53, 0x65, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x74, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06,
	0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x04, 0x63, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77,
	0x0a, 0x19, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15,
	0x4e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a, 0x16,
	0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1b, 0x0a, 0x19, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x70, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x73, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x75, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x6c,
	0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x78, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x04, 0x6c, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x1b, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x17, 0x53, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a,
	0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x8b, 0x01,
	0x0a, 0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x42,
	0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0xcc, 0x02, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6c,
	0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x5d, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x5a, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x58, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22,
	0x8c, 0x03, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d,
	0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0xd4, 0x06,
	0x0a, 0x0e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6c, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x65, 0x78, 0x74, 0x49, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x35,
	0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x73, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c,
	0x65, 0x65, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x70, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x6c, 0x61, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x0f, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x22, 0x5b,
	0x0a, 0x13, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x12, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x62, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x12, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x2e, 0x0a,
	0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x55, 0x0a,
	0x13, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x22, 0xf9, 0x02, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x6c, 0x61, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4f, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x62, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x15,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x9a, 0x02, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4a, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0x77,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52,
	0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x5f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x5c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x1c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x53, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x22, 0xaa, 0x09, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6c, 0x65,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x48, 0x00, 0x52,
	0x05, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x22, 0x0a, 0x02, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x70, 0x4c, 0x73, 0x48, 0x00, 0x52, 0x02, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x70, 0x77,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x50, 0x77, 0x64, 0x48, 0x00, 0x52, 0x03, 0x70, 0x77,
	0x64, 0x12, 0x22, 0x0a, 0x02, 0x63, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x43, 0x64, 0x48,
	0x00, 0x52, 0x02, 0x63, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x77, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x70, 0x57, 0x68, 0x6f, 0x61, 0x6d, 0x69, 0x48, 0x00, 0x52, 0x06, 0x77,
	0x68, 0x6f, 0x61, 0x6d, 0x69, 0x12, 0x22, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x70, 0x50, 0x73, 0x48, 0x00, 0x52, 0x02, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x63, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x43, 0x61, 0x74, 0x48, 0x00, 0x52, 0x03, 0x63, 0x61, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x65, 0x78, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x45, 0x78,
	0x65, 0x63, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x02, 0x63, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x43, 0x70, 0x48, 0x00, 0x52, 0x02, 0x63, 0x70, 0x12, 0x28,
	0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4a, 0x6f, 0x62, 0x73,
	0x48, 0x00, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x6b,
	0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4a, 0x6f, 0x62, 0x6b, 0x69, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x6b,
	0x69, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4b, 0x69, 0x6c, 0x6c, 0x48, 0x00, 0x52,
	0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x02, 0x6d, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x70, 0x4d, 0x76, 0x48, 0x00, 0x52, 0x02, 0x6d, 0x76, 0x12, 0x2b, 0x0a, 0x05, 0x6d, 0x6b, 0x64,
	0x69, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x4d, 0x6b, 0x64, 0x69, 0x72, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x6b, 0x64, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x02, 0x72, 0x6d, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x70, 0x52, 0x6d, 0x48, 0x00, 0x52, 0x02, 0x72, 0x6d, 0x12, 0x41, 0x0a, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x70, 0x45, 0x78, 0x65, 0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x78, 0x65, 0x63, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x53, 0x0a,
	0x13, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x70, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x50, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70,
	0x45, 0x78, 0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78,
	0x65, 0x63, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x70, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x50, 0x70, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x70, 0x70, 0x69, 0x64, 0x12,
	0x28, 0x0a, 0x04, 0x65, 0x78, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x45, 0x78, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x12, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0x29, 0x0a,
	0x15, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x6f, 0x6c, 0x6c, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x62, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xb0, 0x01,
	0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x86, 0x02, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62,
	0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x63, 0x0a, 0x13, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd4,
	0x01, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x62, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x42, 0x69, 0x67, 0x22, 0xce, 0x02, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44, 0x6f, 0x6e, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x74, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x32, 0xa9, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x19, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x61, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x58, 0x0a,
	0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x21,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x23,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x22, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x4e,
	0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x77, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x77, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x5d, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c,
	0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x32, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x2f, 0x63, 0x32, 0x6d, 0x73, 0x68, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_operator_v1_operator_proto_rawDescOnce sync.Once
	file_operator_v1_operator_proto_rawDescData = file_operator_v1_operator_proto_rawDesc
)

func file_operator_v1_operator_proto_rawDescGZIP() []byte {
	file_operator_v1_operator_proto_rawDescOnce.Do(func() {
		file_operator_v1_operator_proto_rawDescData = protoimpl.X.CompressGZIP(file_operator_v1_operator_proto_rawDescData)
	})
	return file_operator_v1_operator_proto_rawDescData
}

var file_operator_v1_operator_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_operator_v1_operator_proto_goTypes = []any{
	(*SessionCookie)(nil),                // 0: operator.v1.SessionCookie
	(*CancelTasksRequest)(nil),           // 1: operator.v1.CancelTasksRequest
	(*CancelTasksResponse)(nil),          // 2: operator.v1.CancelTasksResponse
	(*SetCredentialsNoteRequest)(nil),    // 3: operator.v1.SetCredentialsNoteRequest
	(*SetCredentialsNoteResponse)(nil),   // 4: operator.v1.SetCredentialsNoteResponse
	(*SetCredentialNoteRequest)(nil),     // 5: operator.v1.SetCredentialNoteRequest
	(*SetCredentialNoteResponse)(nil),    // 6: operator.v1.SetCredentialNoteResponse
	(*SetCredentialsColorRequest)(nil),   // 7: operator.v1.SetCredentialsColorRequest
	(*SetCredentialsColorResponse)(nil),  // 8: operator.v1.SetCredentialsColorResponse
	(*SetCredentialColorRequest)(nil),    // 9: operator.v1.SetCredentialColorRequest
	(*SetCredentialColorResponse)(nil),   // 10: operator.v1.SetCredentialColorResponse
	(*NewCredentialRequest)(nil),         // 11: operator.v1.NewCredentialRequest
	(*NewCredentialResponse)(nil),        // 12: operator.v1.NewCredentialResponse
	(*NewChatMessageRequest)(nil),        // 13: operator.v1.NewChatMessageRequest
	(*NewChatMessageResponse)(nil),       // 14: operator.v1.NewChatMessageResponse
	(*SetOperatorsColorRequest)(nil),     // 15: operator.v1.SetOperatorsColorRequest
	(*SetOperatorsColorResponse)(nil),    // 16: operator.v1.SetOperatorsColorResponse
	(*SetOperatorColorRequest)(nil),      // 17: operator.v1.SetOperatorColorRequest
	(*SetOperatorColorResponse)(nil),     // 18: operator.v1.SetOperatorColorResponse
	(*SetListenerNoteRequest)(nil),       // 19: operator.v1.SetListenerNoteRequest
	(*SetListenerNoteResponse)(nil),      // 20: operator.v1.SetListenerNoteResponse
	(*SetBeaconsNoteRequest)(nil),        // 21: operator.v1.SetBeaconsNoteRequest
	(*SetBeaconsNoteResponse)(nil),       // 22: operator.v1.SetBeaconsNoteResponse
	(*SetBeaconNoteRequest)(nil),         // 23: operator.v1.SetBeaconNoteRequest
	(*SetBeaconNoteResponse)(nil),        // 24: operator.v1.SetBeaconNoteResponse
	(*SetBeaconsColorRequest)(nil),       // 25: operator.v1.SetBeaconsColorRequest
	(*SetBeaconsColorResponse)(nil),      // 26: operator.v1.SetBeaconsColorResponse
	(*SetBeaconColorRequest)(nil),        // 27: operator.v1.SetBeaconColorRequest
	(*SetBeaconColorResponse)(nil),       // 28: operator.v1.SetBeaconColorResponse
	(*SetListenersNoteRequest)(nil),      // 29: operator.v1.SetListenersNoteRequest
	(*SetListenersNoteResponse)(nil),     // 30: operator.v1.SetListenersNoteResponse
	(*SetListenersColorRequest)(nil),     // 31: operator.v1.SetListenersColorRequest
	(*SetListenersColorResponse)(nil),    // 32: operator.v1.SetListenersColorResponse
	(*SetListenerColorRequest)(nil),      // 33: operator.v1.SetListenerColorRequest
	(*SetListenerColorResponse)(nil),     // 34: operator.v1.SetListenerColorResponse
	(*HelloRequest)(nil),                 // 35: operator.v1.HelloRequest
	(*HandshakeResponse)(nil),            // 36: operator.v1.HandshakeResponse
	(*HelloResponse)(nil),                // 37: operator.v1.HelloResponse
	(*SubscribeListenersRequest)(nil),    // 38: operator.v1.SubscribeListenersRequest
	(*ListenerResponse)(nil),             // 39: operator.v1.ListenerResponse
	(*ListenersResponse)(nil),            // 40: operator.v1.ListenersResponse
	(*ListenerColorResponse)(nil),        // 41: operator.v1.ListenerColorResponse
	(*ListenerNoteResponse)(nil),         // 42: operator.v1.ListenerNoteResponse
	(*ListenerInfoResponse)(nil),         // 43: operator.v1.ListenerInfoResponse
	(*ListenerLastResponse)(nil),         // 44: operator.v1.ListenerLastResponse
	(*SubscribeListenersResponse)(nil),   // 45: operator.v1.SubscribeListenersResponse
	(*SubscribeBeaconsRequest)(nil),      // 46: operator.v1.SubscribeBeaconsRequest
	(*BeaconResponse)(nil),               // 47: operator.v1.BeaconResponse
	(*BeaconsResponse)(nil),              // 48: operator.v1.BeaconsResponse
	(*BeaconColorResponse)(nil),          // 49: operator.v1.BeaconColorResponse
	(*BeaconNoteResponse)(nil),           // 50: operator.v1.BeaconNoteResponse
	(*BeaconLastResponse)(nil),           // 51: operator.v1.BeaconLastResponse
	(*BeaconSleepResponse)(nil),          // 52: operator.v1.BeaconSleepResponse
	(*SubscribeBeaconsResponse)(nil),     // 53: operator.v1.SubscribeBeaconsResponse
	(*SubscribeOperatorsRequest)(nil),    // 54: operator.v1.SubscribeOperatorsRequest
	(*OperatorResponse)(nil),             // 55: operator.v1.OperatorResponse
	(*OperatorsResponse)(nil),            // 56: operator.v1.OperatorsResponse
	(*OperatorLastResponse)(nil),         // 57: operator.v1.OperatorLastResponse
	(*OperatorColorResponse)(nil),        // 58: operator.v1.OperatorColorResponse
	(*SubscribeOperatorsResponse)(nil),   // 59: operator.v1.SubscribeOperatorsResponse
	(*SubscribeChatRequest)(nil),         // 60: operator.v1.SubscribeChatRequest
	(*ChatResponse)(nil),                 // 61: operator.v1.ChatResponse
	(*ChatMessagesResponse)(nil),         // 62: operator.v1.ChatMessagesResponse
	(*SubscribeChatResponse)(nil),        // 63: operator.v1.SubscribeChatResponse
	(*SubscribeCredentialsRequest)(nil),  // 64: operator.v1.SubscribeCredentialsRequest
	(*CredentialResponse)(nil),           // 65: operator.v1.CredentialResponse
	(*CredentialsResponse)(nil),          // 66: operator.v1.CredentialsResponse
	(*CredentialColorResponse)(nil),      // 67: operator.v1.CredentialColorResponse
	(*CredentialNoteResponse)(nil),       // 68: operator.v1.CredentialNoteResponse
	(*SubscribeCredentialsResponse)(nil), // 69: operator.v1.SubscribeCredentialsResponse
	(*NewGroupRequest)(nil),              // 70: operator.v1.NewGroupRequest
	(*NewTaskGroupRequest)(nil),          // 71: operator.v1.NewTaskGroupRequest
	(*NewTaskMessageRequest)(nil),        // 72: operator.v1.NewTaskMessageRequest
	(*NewTaskRequest)(nil),               // 73: operator.v1.NewTaskRequest
	(*NewGroupResponse)(nil),             // 74: operator.v1.NewGroupResponse
	(*SubscribeTasksRequest)(nil),        // 75: operator.v1.SubscribeTasksRequest
	(*SubscribeTasksHelloRequest)(nil),   // 76: operator.v1.SubscribeTasksHelloRequest
	(*StartPollBeaconRequest)(nil),       // 77: operator.v1.StartPollBeaconRequest
	(*StopPollBeaconRequest)(nil),        // 78: operator.v1.StopPollBeaconRequest
	(*TasksGroupResponse)(nil),           // 79: operator.v1.TasksGroupResponse
	(*TasksMessageResponse)(nil),         // 80: operator.v1.TasksMessageResponse
	(*TasksResponse)(nil),                // 81: operator.v1.TasksResponse
	(*TasksStatusResponse)(nil),          // 82: operator.v1.TasksStatusResponse
	(*TasksDoneResponse)(nil),            // 83: operator.v1.TasksDoneResponse
	(*SubscribeTasksResponse)(nil),       // 84: operator.v1.SubscribeTasksResponse
	(*GetTaskOutputRequest)(nil),         // 85: operator.v1.GetTaskOutputRequest
	(*GetTaskOutputResponse)(nil),        // 86: operator.v1.GetTaskOutputResponse
	(*wrapperspb.StringValue)(nil),       // 87: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),        // 88: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 89: google.protobuf.Empty
	(*wrapperspb.UInt32Value)(nil),       // 90: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),         // 91: google.protobuf.BoolValue
	(*v1.CapSleep)(nil),                  // 92: common.v1.CapSleep
	(*v1.CapLs)(nil),                     // 93: common.v1.CapLs
	(*v1.CapPwd)(nil),                    // 94: common.v1.CapPwd
	(*v1.CapCd)(nil),                     // 95: common.v1.CapCd
	(*v1.CapWhoami)(nil),                 // 96: common.v1.CapWhoami
	(*v1.CapPs)(nil),                     // 97: common.v1.CapPs
	(*v1.CapCat)(nil),                    // 98: common.v1.CapCat
	(*v1.CapExec)(nil),                   // 99: common.v1.CapExec
	(*v1.CapCp)(nil),                     // 100: common.v1.CapCp
	(*v1.CapJobs)(nil),                   // 101: common.v1.CapJobs
	(*v1.CapJobkill)(nil),                // 102: common.v1.CapJobkill
	(*v1.CapKill)(nil),                   // 103: common.v1.CapKill
	(*v1.CapMv)(nil),                     // 104: common.v1.CapMv
	(*v1.CapMkdir)(nil),                  // 105: common.v1.CapMkdir
	(*v1.CapRm)(nil),                     // 106: common.v1.CapRm
	(*v1.CapExecAssembly)(nil),           // 107: common.v1.CapExecAssembly
	(*v1.CapShellcodeInjection)(nil),     // 108: common.v1.CapShellcodeInjection
	(*v1.CapDownload)(nil),               // 109: common.v1.CapDownload
	(*v1.CapUpload)(nil),                 // 110: common.v1.CapUpload
	(*v1.CapPause)(nil),                  // 111: common.v1.CapPause
	(*v1.CapDestruct)(nil),               // 112: common.v1.CapDestruct
	(*v1.CapExecDetach)(nil),             // 113: common.v1.CapExecDetach
	(*v1.CapShell)(nil),                  // 114: common.v1.CapShell
	(*v1.CapPpid)(nil),                   // 115: common.v1.CapPpid
	(*v1.CapExit)(nil),                   // 116: common.v1.CapExit
	(*wrapperspb.BytesValue)(nil),        // 117: google.protobuf.BytesValue
}
var file_operator_v1_operator_proto_depIdxs = []int32{
	0,   // 0: operator.v1.CancelTasksRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 1: operator.v1.SetCredentialsNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 2: operator.v1.SetCredentialNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 3: operator.v1.SetCredentialsColorRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 4: operator.v1.SetCredentialColorRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 5: operator.v1.NewCredentialRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 6: operator.v1.NewCredentialRequest.username:type_name -> google.protobuf.StringValue
	87,  // 7: operator.v1.NewCredentialRequest.password:type_name -> google.protobuf.StringValue
	87,  // 8: operator.v1.NewCredentialRequest.realm:type_name -> google.protobuf.StringValue
	87,  // 9: operator.v1.NewCredentialRequest.host:type_name -> google.protobuf.StringValue
	0,   // 10: operator.v1.NewChatMessageRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 11: operator.v1.SetOperatorsColorRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 12: operator.v1.SetOperatorColorRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 13: operator.v1.SetListenerNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 14: operator.v1.SetBeaconsNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 15: operator.v1.SetBeaconNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 16: operator.v1.SetBeaconsColorRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 17: operator.v1.SetBeaconColorRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 18: operator.v1.SetListenersNoteRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 19: operator.v1.SetListenersColorRequest.cookie:type_name -> operator.v1.SessionCookie
	0,   // 20: operator.v1.SetListenerColorRequest.cookie:type_name -> operator.v1.SessionCookie
	88,  // 21: operator.v1.HandshakeResponse.time:type_name -> google.protobuf.Timestamp
	0,   // 22: operator.v1.HandshakeResponse.cookie:type_name -> operator.v1.SessionCookie
	36,  // 23: operator.v1.HelloResponse.handshake:type_name -> operator.v1.HandshakeResponse
	89,  // 24: operator.v1.HelloResponse.empty:type_name -> google.protobuf.Empty
	0,   // 25: operator.v1.SubscribeListenersRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 26: operator.v1.ListenerResponse.name:type_name -> google.protobuf.StringValue
	87,  // 27: operator.v1.ListenerResponse.ip:type_name -> google.protobuf.StringValue
	90,  // 28: operator.v1.ListenerResponse.port:type_name -> google.protobuf.UInt32Value
	90,  // 29: operator.v1.ListenerResponse.color:type_name -> google.protobuf.UInt32Value
	87,  // 30: operator.v1.ListenerResponse.note:type_name -> google.protobuf.StringValue
	88,  // 31: operator.v1.ListenerResponse.last:type_name -> google.protobuf.Timestamp
	39,  // 32: operator.v1.ListenersResponse.listeners:type_name -> operator.v1.ListenerResponse
	90,  // 33: operator.v1.ListenerColorResponse.color:type_name -> google.protobuf.UInt32Value
	87,  // 34: operator.v1.ListenerNoteResponse.note:type_name -> google.protobuf.StringValue
	87,  // 35: operator.v1.ListenerInfoResponse.name:type_name -> google.protobuf.StringValue
	87,  // 36: operator.v1.ListenerInfoResponse.ip:type_name -> google.protobuf.StringValue
	90,  // 37: operator.v1.ListenerInfoResponse.port:type_name -> google.protobuf.UInt32Value
	88,  // 38: operator.v1.ListenerLastResponse.last:type_name -> google.protobuf.Timestamp
	39,  // 39: operator.v1.SubscribeListenersResponse.listener:type_name -> operator.v1.ListenerResponse
	41,  // 40: operator.v1.SubscribeListenersResponse.color:type_name -> operator.v1.ListenerColorResponse
	42,  // 41: operator.v1.SubscribeListenersResponse.note:type_name -> operator.v1.ListenerNoteResponse
	43,  // 42: operator.v1.SubscribeListenersResponse.info:type_name -> operator.v1.ListenerInfoResponse
	44,  // 43: operator.v1.SubscribeListenersResponse.last:type_name -> operator.v1.ListenerLastResponse
	40,  // 44: operator.v1.SubscribeListenersResponse.listeners:type_name -> operator.v1.ListenersResponse
	0,   // 45: operator.v1.SubscribeBeaconsRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 46: operator.v1.BeaconResponse.ext_ip:type_name -> google.protobuf.StringValue
	87,  // 47: operator.v1.BeaconResponse.int_ip:type_name -> google.protobuf.StringValue
	87,  // 48: operator.v1.BeaconResponse.os_meta:type_name -> google.protobuf.StringValue
	87,  // 49: operator.v1.BeaconResponse.hostname:type_name -> google.protobuf.StringValue
	87,  // 50: operator.v1.BeaconResponse.username:type_name -> google.protobuf.StringValue
	87,  // 51: operator.v1.BeaconResponse.domain:type_name -> google.protobuf.StringValue
	91,  // 52: operator.v1.BeaconResponse.privileged:type_name -> google.protobuf.BoolValue
	87,  // 53: operator.v1.BeaconResponse.proc_name:type_name -> google.protobuf.StringValue
	90,  // 54: operator.v1.BeaconResponse.pid:type_name -> google.protobuf.UInt32Value
	90,  // 55: operator.v1.BeaconResponse.color:type_name -> google.protobuf.UInt32Value
	87,  // 56: operator.v1.BeaconResponse.note:type_name -> google.protobuf.StringValue
	88,  // 57: operator.v1.BeaconResponse.first:type_name -> google.protobuf.Timestamp
	88,  // 58: operator.v1.BeaconResponse.last:type_name -> google.protobuf.Timestamp
	47,  // 59: operator.v1.BeaconsResponse.beacons:type_name -> operator.v1.BeaconResponse
	90,  // 60: operator.v1.BeaconColorResponse.color:type_name -> google.protobuf.UInt32Value
	87,  // 61: operator.v1.BeaconNoteResponse.note:type_name -> google.protobuf.StringValue
	88,  // 62: operator.v1.BeaconLastResponse.last:type_name -> google.protobuf.Timestamp
	47,  // 63: operator.v1.SubscribeBeaconsResponse.beacon:type_name -> operator.v1.BeaconResponse
	49,  // 64: operator.v1.SubscribeBeaconsResponse.color:type_name -> operator.v1.BeaconColorResponse
	50,  // 65: operator.v1.SubscribeBeaconsResponse.note:type_name -> operator.v1.BeaconNoteResponse
	51,  // 66: operator.v1.SubscribeBeaconsResponse.last:type_name -> operator.v1.BeaconLastResponse
	52,  // 67: operator.v1.SubscribeBeaconsResponse.sleep:type_name -> operator.v1.BeaconSleepResponse
	48,  // 68: operator.v1.SubscribeBeaconsResponse.beacons:type_name -> operator.v1.BeaconsResponse
	0,   // 69: operator.v1.SubscribeOperatorsRequest.cookie:type_name -> operator.v1.SessionCookie
	90,  // 70: operator.v1.OperatorResponse.color:type_name -> google.protobuf.UInt32Value
	88,  // 71: operator.v1.OperatorResponse.last:type_name -> google.protobuf.Timestamp
	55,  // 72: operator.v1.OperatorsResponse.operators:type_name -> operator.v1.OperatorResponse
	88,  // 73: operator.v1.OperatorLastResponse.last:type_name -> google.protobuf.Timestamp
	90,  // 74: operator.v1.OperatorColorResponse.color:type_name -> google.protobuf.UInt32Value
	55,  // 75: operator.v1.SubscribeOperatorsResponse.operator:type_name -> operator.v1.OperatorResponse
	57,  // 76: operator.v1.SubscribeOperatorsResponse.last:type_name -> operator.v1.OperatorLastResponse
	58,  // 77: operator.v1.SubscribeOperatorsResponse.color:type_name -> operator.v1.OperatorColorResponse
	56,  // 78: operator.v1.SubscribeOperatorsResponse.operators:type_name -> operator.v1.OperatorsResponse
	0,   // 79: operator.v1.SubscribeChatRequest.cookie:type_name -> operator.v1.SessionCookie
	88,  // 80: operator.v1.ChatResponse.created_at:type_name -> google.protobuf.Timestamp
	61,  // 81: operator.v1.ChatMessagesResponse.messages:type_name -> operator.v1.ChatResponse
	61,  // 82: operator.v1.SubscribeChatResponse.message:type_name -> operator.v1.ChatResponse
	62,  // 83: operator.v1.SubscribeChatResponse.messages:type_name -> operator.v1.ChatMessagesResponse
	0,   // 84: operator.v1.SubscribeCredentialsRequest.cookie:type_name -> operator.v1.SessionCookie
	87,  // 85: operator.v1.CredentialResponse.username:type_name -> google.protobuf.StringValue
	87,  // 86: operator.v1.CredentialResponse.password:type_name -> google.protobuf.StringValue
	87,  // 87: operator.v1.CredentialResponse.realm:type_name -> google.protobuf.StringValue
	87,  // 88: operator.v1.CredentialResponse.host:type_name -> google.protobuf.StringValue
	88,  // 89: operator.v1.CredentialResponse.created_at:type_name -> google.protobuf.Timestamp
	87,  // 90: operator.v1.CredentialResponse.note:type_name -> google.protobuf.StringValue
	90,  // 91: operator.v1.CredentialResponse.color:type_name -> google.protobuf.UInt32Value
	65,  // 92: operator.v1.CredentialsResponse.credentials:type_name -> operator.v1.CredentialResponse
	90,  // 93: operator.v1.CredentialColorResponse.color:type_name -> google.protobuf.UInt32Value
	87,  // 94: operator.v1.CredentialNoteResponse.note:type_name -> google.protobuf.StringValue
	65,  // 95: operator.v1.SubscribeCredentialsResponse.credential:type_name -> operator.v1.CredentialResponse
	67,  // 96: operator.v1.SubscribeCredentialsResponse.color:type_name -> operator.v1.CredentialColorResponse
	68,  // 97: operator.v1.SubscribeCredentialsResponse.note:type_name -> operator.v1.CredentialNoteResponse
	66,  // 98: operator.v1.SubscribeCredentialsResponse.credentials:type_name -> operator.v1.CredentialsResponse
	0,   // 99: operator.v1.NewGroupRequest.cookie:type_name -> operator.v1.SessionCookie
	71,  // 100: operator.v1.NewGroupRequest.group:type_name -> operator.v1.NewTaskGroupRequest
	72,  // 101: operator.v1.NewGroupRequest.message:type_name -> operator.v1.NewTaskMessageRequest
	73,  // 102: operator.v1.NewGroupRequest.task:type_name -> operator.v1.NewTaskRequest
	92,  // 103: operator.v1.NewTaskRequest.sleep:type_name -> common.v1.CapSleep
	93,  // 104: operator.v1.NewTaskRequest.ls:type_name -> common.v1.CapLs
	94,  // 105: operator.v1.NewTaskRequest.pwd:type_name -> common.v1.CapPwd
	95,  // 106: operator.v1.NewTaskRequest.cd:type_name -> common.v1.CapCd
	96,  // 107: operator.v1.NewTaskRequest.whoami:type_name -> common.v1.CapWhoami
	97,  // 108: operator.v1.NewTaskRequest.ps:type_name -> common.v1.CapPs
	98,  // 109: operator.v1.NewTaskRequest.cat:type_name -> common.v1.CapCat
	99,  // 110: operator.v1.NewTaskRequest.exec:type_name -> common.v1.CapExec
	100, // 111: operator.v1.NewTaskRequest.cp:type_name -> common.v1.CapCp
	101, // 112: operator.v1.NewTaskRequest.jobs:type_name -> common.v1.CapJobs
	102, // 113: operator.v1.NewTaskRequest.jobkill:type_name -> common.v1.CapJobkill
	103, // 114: operator.v1.NewTaskRequest.kill:type_name -> common.v1.CapKill
	104, // 115: operator.v1.NewTaskRequest.mv:type_name -> common.v1.CapMv
	105, // 116: operator.v1.NewTaskRequest.mkdir:type_name -> common.v1.CapMkdir
	106, // 117: operator.v1.NewTaskRequest.rm:type_name -> common.v1.CapRm
	107, // 118: operator.v1.NewTaskRequest.exec_assembly:type_name -> common.v1.CapExecAssembly
	108, // 119: operator.v1.NewTaskRequest.shellcode_injection:type_name -> common.v1.CapShellcodeInjection
	109, // 120: operator.v1.NewTaskRequest.download:type_name -> common.v1.CapDownload
	110, // 121: operator.v1.NewTaskRequest.upload:type_name -> common.v1.CapUpload
	111, // 122: operator.v1.NewTaskRequest.pause:type_name -> common.v1.CapPause
	112, // 123: operator.v1.NewTaskRequest.destruct:type_name -> common.v1.CapDestruct
	113, // 124: operator.v1.NewTaskRequest.exec_detach:type_name -> common.v1.CapExecDetach
	114, // 125: operator.v1.NewTaskRequest.shell:type_name -> common.v1.CapShell
	115, // 126: operator.v1.NewTaskRequest.ppid:type_name -> common.v1.CapPpid
	116, // 127: operator.v1.NewTaskRequest.exit:type_name -> common.v1.CapExit
	0,   // 128: operator.v1.SubscribeTasksRequest.cookie:type_name -> operator.v1.SessionCookie
	76,  // 129: operator.v1.SubscribeTasksRequest.hello:type_name -> operator.v1.SubscribeTasksHelloRequest
	77,  // 130: operator.v1.SubscribeTasksRequest.start:type_name -> operator.v1.StartPollBeaconRequest
	78,  // 131: operator.v1.SubscribeTasksRequest.stop:type_name -> operator.v1.StopPollBeaconRequest
	88,  // 132: operator.v1.TasksGroupResponse.created:type_name -> google.protobuf.Timestamp
	88,  // 133: operator.v1.TasksMessageResponse.created:type_name -> google.protobuf.Timestamp
	117, // 134: operator.v1.TasksResponse.output:type_name -> google.protobuf.BytesValue
	88,  // 135: operator.v1.TasksResponse.created:type_name -> google.protobuf.Timestamp
	117, // 136: operator.v1.TasksDoneResponse.output:type_name -> google.protobuf.BytesValue
	79,  // 137: operator.v1.SubscribeTasksResponse.group:type_name -> operator.v1.TasksGroupResponse
	80,  // 138: operator.v1.SubscribeTasksResponse.message:type_name -> operator.v1.TasksMessageResponse
	81,  // 139: operator.v1.SubscribeTasksResponse.task:type_name -> operator.v1.TasksResponse
	82,  // 140: operator.v1.SubscribeTasksResponse.task_status:type_name -> operator.v1.TasksStatusResponse
	83,  // 141: operator.v1.SubscribeTasksResponse.task_done:type_name -> operator.v1.TasksDoneResponse
	0,   // 142: operator.v1.GetTaskOutputRequest.cookie:type_name -> operator.v1.SessionCookie
	117, // 143: operator.v1.GetTaskOutputResponse.output:type_name -> google.protobuf.BytesValue
	35,  // 144: operator.v1.OperatorService.Hello:input_type -> operator.v1.HelloRequest
	38,  // 145: operator.v1.OperatorService.SubscribeListeners:input_type -> operator.v1.SubscribeListenersRequest
	46,  // 146: operator.v1.OperatorService.SubscribeBeacons:input_type -> operator.v1.SubscribeBeaconsRequest
	54,  // 147: operator.v1.OperatorService.SubscribeOperators:input_type -> operator.v1.SubscribeOperatorsRequest
	60,  // 148: operator.v1.OperatorService.SubscribeChat:input_type -> operator.v1.SubscribeChatRequest
	64,  // 149: operator.v1.OperatorService.SubscribeCredentials:input_type -> operator.v1.SubscribeCredentialsRequest
	33,  // 150: operator.v1.OperatorService.SetListenerColor:input_type -> operator.v1.SetListenerColorRequest
	31,  // 151: operator.v1.OperatorService.SetListenersColor:input_type -> operator.v1.SetListenersColorRequest
	19,  // 152: operator.v1.OperatorService.SetListenerNote:input_type -> operator.v1.SetListenerNoteRequest
	29,  // 153: operator.v1.OperatorService.SetListenersNote:input_type -> operator.v1.SetListenersNoteRequest
	27,  // 154: operator.v1.OperatorService.SetBeaconColor:input_type -> operator.v1.SetBeaconColorRequest
	25,  // 155: operator.v1.OperatorService.SetBeaconsColor:input_type -> operator.v1.SetBeaconsColorRequest
	23,  // 156: operator.v1.OperatorService.SetBeaconNote:input_type -> operator.v1.SetBeaconNoteRequest
	21,  // 157: operator.v1.OperatorService.SetBeaconsNote:input_type -> operator.v1.SetBeaconsNoteRequest
	17,  // 158: operator.v1.OperatorService.SetOperatorColor:input_type -> operator.v1.SetOperatorColorRequest
	15,  // 159: operator.v1.OperatorService.SetOperatorsColor:input_type -> operator.v1.SetOperatorsColorRequest
	13,  // 160: operator.v1.OperatorService.NewChatMessage:input_type -> operator.v1.NewChatMessageRequest
	11,  // 161: operator.v1.OperatorService.NewCredential:input_type -> operator.v1.NewCredentialRequest
	9,   // 162: operator.v1.OperatorService.SetCredentialColor:input_type -> operator.v1.SetCredentialColorRequest
	7,   // 163: operator.v1.OperatorService.SetCredentialsColor:input_type -> operator.v1.SetCredentialsColorRequest
	5,   // 164: operator.v1.OperatorService.SetCredentialNote:input_type -> operator.v1.SetCredentialNoteRequest
	3,   // 165: operator.v1.OperatorService.SetCredentialsNote:input_type -> operator.v1.SetCredentialsNoteRequest
	70,  // 166: operator.v1.OperatorService.NewGroup:input_type -> operator.v1.NewGroupRequest
	75,  // 167: operator.v1.OperatorService.SubscribeTasks:input_type -> operator.v1.SubscribeTasksRequest
	1,   // 168: operator.v1.OperatorService.CancelTasks:input_type -> operator.v1.CancelTasksRequest
	85,  // 169: operator.v1.OperatorService.GetTaskOutput:input_type -> operator.v1.GetTaskOutputRequest
	37,  // 170: operator.v1.OperatorService.Hello:output_type -> operator.v1.HelloResponse
	45,  // 171: operator.v1.OperatorService.SubscribeListeners:output_type -> operator.v1.SubscribeListenersResponse
	53,  // 172: operator.v1.OperatorService.SubscribeBeacons:output_type -> operator.v1.SubscribeBeaconsResponse
	59,  // 173: operator.v1.OperatorService.SubscribeOperators:output_type -> operator.v1.SubscribeOperatorsResponse
	63,  // 174: operator.v1.OperatorService.SubscribeChat:output_type -> operator.v1.SubscribeChatResponse
	69,  // 175: operator.v1.OperatorService.SubscribeCredentials:output_type -> operator.v1.SubscribeCredentialsResponse
	34,  // 176: operator.v1.OperatorService.SetListenerColor:output_type -> operator.v1.SetListenerColorResponse
	32,  // 177: operator.v1.OperatorService.SetListenersColor:output_type -> operator.v1.SetListenersColorResponse
	20,  // 178: operator.v1.OperatorService.SetListenerNote:output_type -> operator.v1.SetListenerNoteResponse
	30,  // 179: operator.v1.OperatorService.SetListenersNote:output_type -> operator.v1.SetListenersNoteResponse
	28,  // 180: operator.v1.OperatorService.SetBeaconColor:output_type -> operator.v1.SetBeaconColorResponse
	26,  // 181: operator.v1.OperatorService.SetBeaconsColor:output_type -> operator.v1.SetBeaconsColorResponse
	24,  // 182: operator.v1.OperatorService.SetBeaconNote:output_type -> operator.v1.SetBeaconNoteResponse
	22,  // 183: operator.v1.OperatorService.SetBeaconsNote:output_type -> operator.v1.SetBeaconsNoteResponse
	18,  // 184: operator.v1.OperatorService.SetOperatorColor:output_type -> operator.v1.SetOperatorColorResponse
	16,  // 185: operator.v1.OperatorService.SetOperatorsColor:output_type -> operator.v1.SetOperatorsColorResponse
	14,  // 186: operator.v1.OperatorService.NewChatMessage:output_type -> operator.v1.NewChatMessageResponse
	12,  // 187: operator.v1.OperatorService.NewCredential:output_type -> operator.v1.NewCredentialResponse
	10,  // 188: operator.v1.OperatorService.SetCredentialColor:output_type -> operator.v1.SetCredentialColorResponse
	8,   // 189: operator.v1.OperatorService.SetCredentialsColor:output_type -> operator.v1.SetCredentialsColorResponse
	6,   // 190: operator.v1.OperatorService.SetCredentialNote:output_type -> operator.v1.SetCredentialNoteResponse
	4,   // 191: operator.v1.OperatorService.SetCredentialsNote:output_type -> operator.v1.SetCredentialsNoteResponse
	74,  // 192: operator.v1.OperatorService.NewGroup:output_type -> operator.v1.NewGroupResponse
	84,  // 193: operator.v1.OperatorService.SubscribeTasks:output_type -> operator.v1.SubscribeTasksResponse
	2,   // 194: operator.v1.OperatorService.CancelTasks:output_type -> operator.v1.CancelTasksResponse
	86,  // 195: operator.v1.OperatorService.GetTaskOutput:output_type -> operator.v1.GetTaskOutputResponse
	170, // [170:196] is the sub-list for method output_type
	144, // [144:170] is the sub-list for method input_type
	144, // [144:144] is the sub-list for extension type_name
	144, // [144:144] is the sub-list for extension extendee
	0,   // [0:144] is the sub-list for field type_name
}

func init() { file_operator_v1_operator_proto_init() }
func file_operator_v1_operator_proto_init() {
	if File_operator_v1_operator_proto != nil {
		return
	}
	file_operator_v1_operator_proto_msgTypes[37].OneofWrappers = []any{
		(*HelloResponse_Handshake)(nil),
		(*HelloResponse_Empty)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[45].OneofWrappers = []any{
		(*SubscribeListenersResponse_Listener)(nil),
		(*SubscribeListenersResponse_Color)(nil),
		(*SubscribeListenersResponse_Note)(nil),
		(*SubscribeListenersResponse_Info)(nil),
		(*SubscribeListenersResponse_Last)(nil),
		(*SubscribeListenersResponse_Listeners)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[53].OneofWrappers = []any{
		(*SubscribeBeaconsResponse_Beacon)(nil),
		(*SubscribeBeaconsResponse_Color)(nil),
		(*SubscribeBeaconsResponse_Note)(nil),
		(*SubscribeBeaconsResponse_Last)(nil),
		(*SubscribeBeaconsResponse_Sleep)(nil),
		(*SubscribeBeaconsResponse_Beacons)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[59].OneofWrappers = []any{
		(*SubscribeOperatorsResponse_Operator)(nil),
		(*SubscribeOperatorsResponse_Last)(nil),
		(*SubscribeOperatorsResponse_Color)(nil),
		(*SubscribeOperatorsResponse_Operators)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[63].OneofWrappers = []any{
		(*SubscribeChatResponse_Message)(nil),
		(*SubscribeChatResponse_Messages)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[69].OneofWrappers = []any{
		(*SubscribeCredentialsResponse_Credential)(nil),
		(*SubscribeCredentialsResponse_Color)(nil),
		(*SubscribeCredentialsResponse_Note)(nil),
		(*SubscribeCredentialsResponse_Credentials)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[70].OneofWrappers = []any{
		(*NewGroupRequest_Group)(nil),
		(*NewGroupRequest_Message)(nil),
		(*NewGroupRequest_Task)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[73].OneofWrappers = []any{
		(*NewTaskRequest_Sleep)(nil),
		(*NewTaskRequest_Ls)(nil),
		(*NewTaskRequest_Pwd)(nil),
		(*NewTaskRequest_Cd)(nil),
		(*NewTaskRequest_Whoami)(nil),
		(*NewTaskRequest_Ps)(nil),
		(*NewTaskRequest_Cat)(nil),
		(*NewTaskRequest_Exec)(nil),
		(*NewTaskRequest_Cp)(nil),
		(*NewTaskRequest_Jobs)(nil),
		(*NewTaskRequest_Jobkill)(nil),
		(*NewTaskRequest_Kill)(nil),
		(*NewTaskRequest_Mv)(nil),
		(*NewTaskRequest_Mkdir)(nil),
		(*NewTaskRequest_Rm)(nil),
		(*NewTaskRequest_ExecAssembly)(nil),
		(*NewTaskRequest_ShellcodeInjection)(nil),
		(*NewTaskRequest_Download)(nil),
		(*NewTaskRequest_Upload)(nil),
		(*NewTaskRequest_Pause)(nil),
		(*NewTaskRequest_Destruct)(nil),
		(*NewTaskRequest_ExecDetach)(nil),
		(*NewTaskRequest_Shell)(nil),
		(*NewTaskRequest_Ppid)(nil),
		(*NewTaskRequest_Exit)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[75].OneofWrappers = []any{
		(*SubscribeTasksRequest_Hello)(nil),
		(*SubscribeTasksRequest_Start)(nil),
		(*SubscribeTasksRequest_Stop)(nil),
	}
	file_operator_v1_operator_proto_msgTypes[84].OneofWrappers = []any{
		(*SubscribeTasksResponse_Group)(nil),
		(*SubscribeTasksResponse_Message)(nil),
		(*SubscribeTasksResponse_Task)(nil),
		(*SubscribeTasksResponse_TaskStatus)(nil),
		(*SubscribeTasksResponse_TaskDone)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operator_v1_operator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_operator_v1_operator_proto_goTypes,
		DependencyIndexes: file_operator_v1_operator_proto_depIdxs,
		MessageInfos:      file_operator_v1_operator_proto_msgTypes,
	}.Build()
	File_operator_v1_operator_proto = out.File
	file_operator_v1_operator_proto_rawDesc = nil
	file_operator_v1_operator_proto_goTypes = nil
	file_operator_v1_operator_proto_depIdxs = nil
}
