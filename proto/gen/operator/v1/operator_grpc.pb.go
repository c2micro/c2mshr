// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: operator/v1/operator.proto

package operatorv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OperatorService_Hello_FullMethodName                = "/operator.v1.OperatorService/Hello"
	OperatorService_SubscribeListeners_FullMethodName   = "/operator.v1.OperatorService/SubscribeListeners"
	OperatorService_SubscribeBeacons_FullMethodName     = "/operator.v1.OperatorService/SubscribeBeacons"
	OperatorService_SubscribeOperators_FullMethodName   = "/operator.v1.OperatorService/SubscribeOperators"
	OperatorService_SubscribeChat_FullMethodName        = "/operator.v1.OperatorService/SubscribeChat"
	OperatorService_SubscribeCredentials_FullMethodName = "/operator.v1.OperatorService/SubscribeCredentials"
	OperatorService_SetListenerColor_FullMethodName     = "/operator.v1.OperatorService/SetListenerColor"
	OperatorService_SetListenersColor_FullMethodName    = "/operator.v1.OperatorService/SetListenersColor"
	OperatorService_SetListenerNote_FullMethodName      = "/operator.v1.OperatorService/SetListenerNote"
	OperatorService_SetListenersNote_FullMethodName     = "/operator.v1.OperatorService/SetListenersNote"
	OperatorService_SetBeaconColor_FullMethodName       = "/operator.v1.OperatorService/SetBeaconColor"
	OperatorService_SetBeaconsColor_FullMethodName      = "/operator.v1.OperatorService/SetBeaconsColor"
	OperatorService_SetBeaconNote_FullMethodName        = "/operator.v1.OperatorService/SetBeaconNote"
	OperatorService_SetBeaconsNote_FullMethodName       = "/operator.v1.OperatorService/SetBeaconsNote"
	OperatorService_SetOperatorColor_FullMethodName     = "/operator.v1.OperatorService/SetOperatorColor"
	OperatorService_SetOperatorsColor_FullMethodName    = "/operator.v1.OperatorService/SetOperatorsColor"
	OperatorService_NewChatMessage_FullMethodName       = "/operator.v1.OperatorService/NewChatMessage"
	OperatorService_NewCredential_FullMethodName        = "/operator.v1.OperatorService/NewCredential"
	OperatorService_SetCredentialColor_FullMethodName   = "/operator.v1.OperatorService/SetCredentialColor"
	OperatorService_SetCredentialsColor_FullMethodName  = "/operator.v1.OperatorService/SetCredentialsColor"
	OperatorService_SetCredentialNote_FullMethodName    = "/operator.v1.OperatorService/SetCredentialNote"
	OperatorService_SetCredentialsNote_FullMethodName   = "/operator.v1.OperatorService/SetCredentialsNote"
	OperatorService_NewGroup_FullMethodName             = "/operator.v1.OperatorService/NewGroup"
	OperatorService_SubscribeTasks_FullMethodName       = "/operator.v1.OperatorService/SubscribeTasks"
	OperatorService_CancelTasks_FullMethodName          = "/operator.v1.OperatorService/CancelTasks"
	OperatorService_GetTaskOuput_FullMethodName         = "/operator.v1.OperatorService/GetTaskOuput"
)

// OperatorServiceClient is the client API for OperatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatorServiceClient interface {
	// первоначальный хендшейк и отслеживание "здоровья" оператора
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error)
	// подписка на получение обновлений списка с листенерами
	SubscribeListeners(ctx context.Context, in *SubscribeListenersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeListenersResponse], error)
	// подписка на получение обновлений списка с биконами
	SubscribeBeacons(ctx context.Context, in *SubscribeBeaconsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeBeaconsResponse], error)
	// подписка на получение обновлений списка с операторами
	SubscribeOperators(ctx context.Context, in *SubscribeOperatorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeOperatorsResponse], error)
	// подписка на получение обновлений списка сообщений в чате
	SubscribeChat(ctx context.Context, in *SubscribeChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeChatResponse], error)
	// подписка на получение обновлений списка кределов
	SubscribeCredentials(ctx context.Context, in *SubscribeCredentialsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeCredentialsResponse], error)
	// обновление цвета листенера
	SetListenerColor(ctx context.Context, in *SetListenerColorRequest, opts ...grpc.CallOption) (*SetListenerColorResponse, error)
	// обновление цвета на нескольких листенерах
	SetListenersColor(ctx context.Context, in *SetListenersColorRequest, opts ...grpc.CallOption) (*SetListenersColorResponse, error)
	// обновление заметки листенера
	SetListenerNote(ctx context.Context, in *SetListenerNoteRequest, opts ...grpc.CallOption) (*SetListenerNoteResponse, error)
	// обновление заметки на нескольких листенерах
	SetListenersNote(ctx context.Context, in *SetListenersNoteRequest, opts ...grpc.CallOption) (*SetListenersNoteResponse, error)
	// обновление цвета бикона
	SetBeaconColor(ctx context.Context, in *SetBeaconColorRequest, opts ...grpc.CallOption) (*SetBeaconColorResponse, error)
	// обновление цвета на нескольких биконах
	SetBeaconsColor(ctx context.Context, in *SetBeaconsColorRequest, opts ...grpc.CallOption) (*SetBeaconsColorResponse, error)
	// обновление заметки бикона
	SetBeaconNote(ctx context.Context, in *SetBeaconNoteRequest, opts ...grpc.CallOption) (*SetBeaconNoteResponse, error)
	// обновление заметки на нескольких биконах
	SetBeaconsNote(ctx context.Context, in *SetBeaconsNoteRequest, opts ...grpc.CallOption) (*SetBeaconsNoteResponse, error)
	// обновление цвета для оператора
	SetOperatorColor(ctx context.Context, in *SetOperatorColorRequest, opts ...grpc.CallOption) (*SetOperatorColorResponse, error)
	// обновление цвета для нескольких операторов
	SetOperatorsColor(ctx context.Context, in *SetOperatorsColorRequest, opts ...grpc.CallOption) (*SetOperatorsColorResponse, error)
	// создание нового сообщения в чате
	NewChatMessage(ctx context.Context, in *NewChatMessageRequest, opts ...grpc.CallOption) (*NewChatMessageResponse, error)
	// создание новой связки кредов
	NewCredential(ctx context.Context, in *NewCredentialRequest, opts ...grpc.CallOption) (*NewCredentialResponse, error)
	// обновление цвета для кределов
	SetCredentialColor(ctx context.Context, in *SetCredentialColorRequest, opts ...grpc.CallOption) (*SetCredentialColorResponse, error)
	// обновление цвета для списка кределов
	SetCredentialsColor(ctx context.Context, in *SetCredentialsColorRequest, opts ...grpc.CallOption) (*SetCredentialsColorResponse, error)
	// обновление заметки для кределов
	SetCredentialNote(ctx context.Context, in *SetCredentialNoteRequest, opts ...grpc.CallOption) (*SetCredentialNoteResponse, error)
	// обновление заметки для списка кределов
	SetCredentialsNote(ctx context.Context, in *SetCredentialsNoteRequest, opts ...grpc.CallOption) (*SetCredentialsNoteResponse, error)
	// создание группы/задач/сообщений для бикона
	NewGroup(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewGroupRequest, NewGroupResponse], error)
	// подписка на получение обновление по таскам для биконов
	SubscribeTasks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTasksRequest, SubscribeTasksResponse], error)
	// отмена всех тасков (в статусе NEW), созданных оператором
	CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error)
	// получение полного output для таска по его ID. Используется для скачивания больших output'ов
	GetTaskOuput(ctx context.Context, in *GetTaskOutputRequest, opts ...grpc.CallOption) (*GetTaskOutputResponse, error)
}

type operatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatorServiceClient(cc grpc.ClientConnInterface) OperatorServiceClient {
	return &operatorServiceClient{cc}
}

func (c *operatorServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[HelloResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[0], OperatorService_Hello_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HelloRequest, HelloResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_HelloClient = grpc.ServerStreamingClient[HelloResponse]

func (c *operatorServiceClient) SubscribeListeners(ctx context.Context, in *SubscribeListenersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeListenersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[1], OperatorService_SubscribeListeners_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeListenersRequest, SubscribeListenersResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeListenersClient = grpc.ServerStreamingClient[SubscribeListenersResponse]

func (c *operatorServiceClient) SubscribeBeacons(ctx context.Context, in *SubscribeBeaconsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeBeaconsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[2], OperatorService_SubscribeBeacons_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeBeaconsRequest, SubscribeBeaconsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeBeaconsClient = grpc.ServerStreamingClient[SubscribeBeaconsResponse]

func (c *operatorServiceClient) SubscribeOperators(ctx context.Context, in *SubscribeOperatorsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeOperatorsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[3], OperatorService_SubscribeOperators_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeOperatorsRequest, SubscribeOperatorsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeOperatorsClient = grpc.ServerStreamingClient[SubscribeOperatorsResponse]

func (c *operatorServiceClient) SubscribeChat(ctx context.Context, in *SubscribeChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[4], OperatorService_SubscribeChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeChatRequest, SubscribeChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeChatClient = grpc.ServerStreamingClient[SubscribeChatResponse]

func (c *operatorServiceClient) SubscribeCredentials(ctx context.Context, in *SubscribeCredentialsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeCredentialsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[5], OperatorService_SubscribeCredentials_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeCredentialsRequest, SubscribeCredentialsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeCredentialsClient = grpc.ServerStreamingClient[SubscribeCredentialsResponse]

func (c *operatorServiceClient) SetListenerColor(ctx context.Context, in *SetListenerColorRequest, opts ...grpc.CallOption) (*SetListenerColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenerColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenerColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetListenersColor(ctx context.Context, in *SetListenersColorRequest, opts ...grpc.CallOption) (*SetListenersColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenersColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenersColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetListenerNote(ctx context.Context, in *SetListenerNoteRequest, opts ...grpc.CallOption) (*SetListenerNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenerNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenerNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetListenersNote(ctx context.Context, in *SetListenersNoteRequest, opts ...grpc.CallOption) (*SetListenersNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetListenersNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetListenersNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetBeaconColor(ctx context.Context, in *SetBeaconColorRequest, opts ...grpc.CallOption) (*SetBeaconColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBeaconColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetBeaconColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetBeaconsColor(ctx context.Context, in *SetBeaconsColorRequest, opts ...grpc.CallOption) (*SetBeaconsColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBeaconsColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetBeaconsColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetBeaconNote(ctx context.Context, in *SetBeaconNoteRequest, opts ...grpc.CallOption) (*SetBeaconNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBeaconNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetBeaconNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetBeaconsNote(ctx context.Context, in *SetBeaconsNoteRequest, opts ...grpc.CallOption) (*SetBeaconsNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBeaconsNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetBeaconsNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetOperatorColor(ctx context.Context, in *SetOperatorColorRequest, opts ...grpc.CallOption) (*SetOperatorColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOperatorColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetOperatorColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetOperatorsColor(ctx context.Context, in *SetOperatorsColorRequest, opts ...grpc.CallOption) (*SetOperatorsColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetOperatorsColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetOperatorsColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) NewChatMessage(ctx context.Context, in *NewChatMessageRequest, opts ...grpc.CallOption) (*NewChatMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewChatMessageResponse)
	err := c.cc.Invoke(ctx, OperatorService_NewChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) NewCredential(ctx context.Context, in *NewCredentialRequest, opts ...grpc.CallOption) (*NewCredentialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewCredentialResponse)
	err := c.cc.Invoke(ctx, OperatorService_NewCredential_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialColor(ctx context.Context, in *SetCredentialColorRequest, opts ...grpc.CallOption) (*SetCredentialColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialsColor(ctx context.Context, in *SetCredentialsColorRequest, opts ...grpc.CallOption) (*SetCredentialsColorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialsColorResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialsColor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialNote(ctx context.Context, in *SetCredentialNoteRequest, opts ...grpc.CallOption) (*SetCredentialNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) SetCredentialsNote(ctx context.Context, in *SetCredentialsNoteRequest, opts ...grpc.CallOption) (*SetCredentialsNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCredentialsNoteResponse)
	err := c.cc.Invoke(ctx, OperatorService_SetCredentialsNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) NewGroup(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NewGroupRequest, NewGroupResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[6], OperatorService_NewGroup_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NewGroupRequest, NewGroupResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_NewGroupClient = grpc.ClientStreamingClient[NewGroupRequest, NewGroupResponse]

func (c *operatorServiceClient) SubscribeTasks(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscribeTasksRequest, SubscribeTasksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OperatorService_ServiceDesc.Streams[7], OperatorService_SubscribeTasks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeTasksRequest, SubscribeTasksResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeTasksClient = grpc.BidiStreamingClient[SubscribeTasksRequest, SubscribeTasksResponse]

func (c *operatorServiceClient) CancelTasks(ctx context.Context, in *CancelTasksRequest, opts ...grpc.CallOption) (*CancelTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTasksResponse)
	err := c.cc.Invoke(ctx, OperatorService_CancelTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatorServiceClient) GetTaskOuput(ctx context.Context, in *GetTaskOutputRequest, opts ...grpc.CallOption) (*GetTaskOutputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskOutputResponse)
	err := c.cc.Invoke(ctx, OperatorService_GetTaskOuput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatorServiceServer is the server API for OperatorService service.
// All implementations must embed UnimplementedOperatorServiceServer
// for forward compatibility.
type OperatorServiceServer interface {
	// первоначальный хендшейк и отслеживание "здоровья" оператора
	Hello(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error
	// подписка на получение обновлений списка с листенерами
	SubscribeListeners(*SubscribeListenersRequest, grpc.ServerStreamingServer[SubscribeListenersResponse]) error
	// подписка на получение обновлений списка с биконами
	SubscribeBeacons(*SubscribeBeaconsRequest, grpc.ServerStreamingServer[SubscribeBeaconsResponse]) error
	// подписка на получение обновлений списка с операторами
	SubscribeOperators(*SubscribeOperatorsRequest, grpc.ServerStreamingServer[SubscribeOperatorsResponse]) error
	// подписка на получение обновлений списка сообщений в чате
	SubscribeChat(*SubscribeChatRequest, grpc.ServerStreamingServer[SubscribeChatResponse]) error
	// подписка на получение обновлений списка кределов
	SubscribeCredentials(*SubscribeCredentialsRequest, grpc.ServerStreamingServer[SubscribeCredentialsResponse]) error
	// обновление цвета листенера
	SetListenerColor(context.Context, *SetListenerColorRequest) (*SetListenerColorResponse, error)
	// обновление цвета на нескольких листенерах
	SetListenersColor(context.Context, *SetListenersColorRequest) (*SetListenersColorResponse, error)
	// обновление заметки листенера
	SetListenerNote(context.Context, *SetListenerNoteRequest) (*SetListenerNoteResponse, error)
	// обновление заметки на нескольких листенерах
	SetListenersNote(context.Context, *SetListenersNoteRequest) (*SetListenersNoteResponse, error)
	// обновление цвета бикона
	SetBeaconColor(context.Context, *SetBeaconColorRequest) (*SetBeaconColorResponse, error)
	// обновление цвета на нескольких биконах
	SetBeaconsColor(context.Context, *SetBeaconsColorRequest) (*SetBeaconsColorResponse, error)
	// обновление заметки бикона
	SetBeaconNote(context.Context, *SetBeaconNoteRequest) (*SetBeaconNoteResponse, error)
	// обновление заметки на нескольких биконах
	SetBeaconsNote(context.Context, *SetBeaconsNoteRequest) (*SetBeaconsNoteResponse, error)
	// обновление цвета для оператора
	SetOperatorColor(context.Context, *SetOperatorColorRequest) (*SetOperatorColorResponse, error)
	// обновление цвета для нескольких операторов
	SetOperatorsColor(context.Context, *SetOperatorsColorRequest) (*SetOperatorsColorResponse, error)
	// создание нового сообщения в чате
	NewChatMessage(context.Context, *NewChatMessageRequest) (*NewChatMessageResponse, error)
	// создание новой связки кредов
	NewCredential(context.Context, *NewCredentialRequest) (*NewCredentialResponse, error)
	// обновление цвета для кределов
	SetCredentialColor(context.Context, *SetCredentialColorRequest) (*SetCredentialColorResponse, error)
	// обновление цвета для списка кределов
	SetCredentialsColor(context.Context, *SetCredentialsColorRequest) (*SetCredentialsColorResponse, error)
	// обновление заметки для кределов
	SetCredentialNote(context.Context, *SetCredentialNoteRequest) (*SetCredentialNoteResponse, error)
	// обновление заметки для списка кределов
	SetCredentialsNote(context.Context, *SetCredentialsNoteRequest) (*SetCredentialsNoteResponse, error)
	// создание группы/задач/сообщений для бикона
	NewGroup(grpc.ClientStreamingServer[NewGroupRequest, NewGroupResponse]) error
	// подписка на получение обновление по таскам для биконов
	SubscribeTasks(grpc.BidiStreamingServer[SubscribeTasksRequest, SubscribeTasksResponse]) error
	// отмена всех тасков (в статусе NEW), созданных оператором
	CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error)
	// получение полного output для таска по его ID. Используется для скачивания больших output'ов
	GetTaskOuput(context.Context, *GetTaskOutputRequest) (*GetTaskOutputResponse, error)
	mustEmbedUnimplementedOperatorServiceServer()
}

// UnimplementedOperatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperatorServiceServer struct{}

func (UnimplementedOperatorServiceServer) Hello(*HelloRequest, grpc.ServerStreamingServer[HelloResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeListeners(*SubscribeListenersRequest, grpc.ServerStreamingServer[SubscribeListenersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeListeners not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeBeacons(*SubscribeBeaconsRequest, grpc.ServerStreamingServer[SubscribeBeaconsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBeacons not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeOperators(*SubscribeOperatorsRequest, grpc.ServerStreamingServer[SubscribeOperatorsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOperators not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeChat(*SubscribeChatRequest, grpc.ServerStreamingServer[SubscribeChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeChat not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeCredentials(*SubscribeCredentialsRequest, grpc.ServerStreamingServer[SubscribeCredentialsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCredentials not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenerColor(context.Context, *SetListenerColorRequest) (*SetListenerColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenerColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenersColor(context.Context, *SetListenersColorRequest) (*SetListenersColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenersColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenerNote(context.Context, *SetListenerNoteRequest) (*SetListenerNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenerNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetListenersNote(context.Context, *SetListenersNoteRequest) (*SetListenersNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetListenersNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetBeaconColor(context.Context, *SetBeaconColorRequest) (*SetBeaconColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBeaconColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetBeaconsColor(context.Context, *SetBeaconsColorRequest) (*SetBeaconsColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBeaconsColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetBeaconNote(context.Context, *SetBeaconNoteRequest) (*SetBeaconNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBeaconNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetBeaconsNote(context.Context, *SetBeaconsNoteRequest) (*SetBeaconsNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBeaconsNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetOperatorColor(context.Context, *SetOperatorColorRequest) (*SetOperatorColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperatorColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetOperatorsColor(context.Context, *SetOperatorsColorRequest) (*SetOperatorsColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperatorsColor not implemented")
}
func (UnimplementedOperatorServiceServer) NewChatMessage(context.Context, *NewChatMessageRequest) (*NewChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewChatMessage not implemented")
}
func (UnimplementedOperatorServiceServer) NewCredential(context.Context, *NewCredentialRequest) (*NewCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCredential not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialColor(context.Context, *SetCredentialColorRequest) (*SetCredentialColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialsColor(context.Context, *SetCredentialsColorRequest) (*SetCredentialsColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialsColor not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialNote(context.Context, *SetCredentialNoteRequest) (*SetCredentialNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialNote not implemented")
}
func (UnimplementedOperatorServiceServer) SetCredentialsNote(context.Context, *SetCredentialsNoteRequest) (*SetCredentialsNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCredentialsNote not implemented")
}
func (UnimplementedOperatorServiceServer) NewGroup(grpc.ClientStreamingServer[NewGroupRequest, NewGroupResponse]) error {
	return status.Errorf(codes.Unimplemented, "method NewGroup not implemented")
}
func (UnimplementedOperatorServiceServer) SubscribeTasks(grpc.BidiStreamingServer[SubscribeTasksRequest, SubscribeTasksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTasks not implemented")
}
func (UnimplementedOperatorServiceServer) CancelTasks(context.Context, *CancelTasksRequest) (*CancelTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTasks not implemented")
}
func (UnimplementedOperatorServiceServer) GetTaskOuput(context.Context, *GetTaskOutputRequest) (*GetTaskOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskOuput not implemented")
}
func (UnimplementedOperatorServiceServer) mustEmbedUnimplementedOperatorServiceServer() {}
func (UnimplementedOperatorServiceServer) testEmbeddedByValue()                         {}

// UnsafeOperatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatorServiceServer will
// result in compilation errors.
type UnsafeOperatorServiceServer interface {
	mustEmbedUnimplementedOperatorServiceServer()
}

func RegisterOperatorServiceServer(s grpc.ServiceRegistrar, srv OperatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedOperatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperatorService_ServiceDesc, srv)
}

func _OperatorService_Hello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).Hello(m, &grpc.GenericServerStream[HelloRequest, HelloResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_HelloServer = grpc.ServerStreamingServer[HelloResponse]

func _OperatorService_SubscribeListeners_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeListenersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeListeners(m, &grpc.GenericServerStream[SubscribeListenersRequest, SubscribeListenersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeListenersServer = grpc.ServerStreamingServer[SubscribeListenersResponse]

func _OperatorService_SubscribeBeacons_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBeaconsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeBeacons(m, &grpc.GenericServerStream[SubscribeBeaconsRequest, SubscribeBeaconsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeBeaconsServer = grpc.ServerStreamingServer[SubscribeBeaconsResponse]

func _OperatorService_SubscribeOperators_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOperatorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeOperators(m, &grpc.GenericServerStream[SubscribeOperatorsRequest, SubscribeOperatorsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeOperatorsServer = grpc.ServerStreamingServer[SubscribeOperatorsResponse]

func _OperatorService_SubscribeChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeChat(m, &grpc.GenericServerStream[SubscribeChatRequest, SubscribeChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeChatServer = grpc.ServerStreamingServer[SubscribeChatResponse]

func _OperatorService_SubscribeCredentials_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeCredentialsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OperatorServiceServer).SubscribeCredentials(m, &grpc.GenericServerStream[SubscribeCredentialsRequest, SubscribeCredentialsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeCredentialsServer = grpc.ServerStreamingServer[SubscribeCredentialsResponse]

func _OperatorService_SetListenerColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenerColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenerColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenerColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenerColor(ctx, req.(*SetListenerColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetListenersColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenersColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenersColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenersColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenersColor(ctx, req.(*SetListenersColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetListenerNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenerNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenerNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenerNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenerNote(ctx, req.(*SetListenerNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetListenersNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetListenersNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetListenersNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetListenersNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetListenersNote(ctx, req.(*SetListenersNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetBeaconColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBeaconColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetBeaconColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetBeaconColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetBeaconColor(ctx, req.(*SetBeaconColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetBeaconsColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBeaconsColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetBeaconsColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetBeaconsColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetBeaconsColor(ctx, req.(*SetBeaconsColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetBeaconNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBeaconNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetBeaconNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetBeaconNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetBeaconNote(ctx, req.(*SetBeaconNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetBeaconsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBeaconsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetBeaconsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetBeaconsNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetBeaconsNote(ctx, req.(*SetBeaconsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetOperatorColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperatorColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetOperatorColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetOperatorColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetOperatorColor(ctx, req.(*SetOperatorColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetOperatorsColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperatorsColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetOperatorsColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetOperatorsColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetOperatorsColor(ctx, req.(*SetOperatorsColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_NewChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).NewChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_NewChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).NewChatMessage(ctx, req.(*NewChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_NewCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).NewCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_NewCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).NewCredential(ctx, req.(*NewCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialColor(ctx, req.(*SetCredentialColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialsColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialsColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialsColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialsColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialsColor(ctx, req.(*SetCredentialsColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialNote(ctx, req.(*SetCredentialNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_SetCredentialsNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCredentialsNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).SetCredentialsNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_SetCredentialsNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).SetCredentialsNote(ctx, req.(*SetCredentialsNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_NewGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperatorServiceServer).NewGroup(&grpc.GenericServerStream[NewGroupRequest, NewGroupResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_NewGroupServer = grpc.ClientStreamingServer[NewGroupRequest, NewGroupResponse]

func _OperatorService_SubscribeTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperatorServiceServer).SubscribeTasks(&grpc.GenericServerStream[SubscribeTasksRequest, SubscribeTasksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OperatorService_SubscribeTasksServer = grpc.BidiStreamingServer[SubscribeTasksRequest, SubscribeTasksResponse]

func _OperatorService_CancelTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).CancelTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_CancelTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).CancelTasks(ctx, req.(*CancelTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatorService_GetTaskOuput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatorServiceServer).GetTaskOuput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperatorService_GetTaskOuput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatorServiceServer).GetTaskOuput(ctx, req.(*GetTaskOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatorService_ServiceDesc is the grpc.ServiceDesc for OperatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operator.v1.OperatorService",
	HandlerType: (*OperatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetListenerColor",
			Handler:    _OperatorService_SetListenerColor_Handler,
		},
		{
			MethodName: "SetListenersColor",
			Handler:    _OperatorService_SetListenersColor_Handler,
		},
		{
			MethodName: "SetListenerNote",
			Handler:    _OperatorService_SetListenerNote_Handler,
		},
		{
			MethodName: "SetListenersNote",
			Handler:    _OperatorService_SetListenersNote_Handler,
		},
		{
			MethodName: "SetBeaconColor",
			Handler:    _OperatorService_SetBeaconColor_Handler,
		},
		{
			MethodName: "SetBeaconsColor",
			Handler:    _OperatorService_SetBeaconsColor_Handler,
		},
		{
			MethodName: "SetBeaconNote",
			Handler:    _OperatorService_SetBeaconNote_Handler,
		},
		{
			MethodName: "SetBeaconsNote",
			Handler:    _OperatorService_SetBeaconsNote_Handler,
		},
		{
			MethodName: "SetOperatorColor",
			Handler:    _OperatorService_SetOperatorColor_Handler,
		},
		{
			MethodName: "SetOperatorsColor",
			Handler:    _OperatorService_SetOperatorsColor_Handler,
		},
		{
			MethodName: "NewChatMessage",
			Handler:    _OperatorService_NewChatMessage_Handler,
		},
		{
			MethodName: "NewCredential",
			Handler:    _OperatorService_NewCredential_Handler,
		},
		{
			MethodName: "SetCredentialColor",
			Handler:    _OperatorService_SetCredentialColor_Handler,
		},
		{
			MethodName: "SetCredentialsColor",
			Handler:    _OperatorService_SetCredentialsColor_Handler,
		},
		{
			MethodName: "SetCredentialNote",
			Handler:    _OperatorService_SetCredentialNote_Handler,
		},
		{
			MethodName: "SetCredentialsNote",
			Handler:    _OperatorService_SetCredentialsNote_Handler,
		},
		{
			MethodName: "CancelTasks",
			Handler:    _OperatorService_CancelTasks_Handler,
		},
		{
			MethodName: "GetTaskOuput",
			Handler:    _OperatorService_GetTaskOuput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Hello",
			Handler:       _OperatorService_Hello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeListeners",
			Handler:       _OperatorService_SubscribeListeners_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBeacons",
			Handler:       _OperatorService_SubscribeBeacons_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOperators",
			Handler:       _OperatorService_SubscribeOperators_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeChat",
			Handler:       _OperatorService_SubscribeChat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCredentials",
			Handler:       _OperatorService_SubscribeCredentials_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewGroup",
			Handler:       _OperatorService_NewGroup_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeTasks",
			Handler:       _OperatorService_SubscribeTasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "operator/v1/operator.proto",
}
