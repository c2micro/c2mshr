syntax = "proto3";

package management.v1;

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/c2micro/c2mshr/proto/gen/management/v1;managementv1";

service ManagementService {
  // получение зарегистрированных операторов
  rpc GetOperators ( GetOperatorsRequest ) returns ( GetOperatorsResponse );

  // создание нового оператора
  rpc NewOperator ( NewOperatorRequest ) returns ( NewOperatorResponse );

  // удаление access токена у оператора
  rpc RevokeOperator ( RevokeOperatorRequest ) returns ( RevokeOperatorResponse );

  // регенерация access токена оператора
  rpc RegenerateOperator ( RegenerateOperatorRequest ) returns ( RegenerateOperatorResponse );

  // получение зарегистрированных листенеров
  rpc GetListeners ( GetListenersRequest ) returns ( GetListenersResponse );

  // создание нового листенера
  rpc NewListener ( NewListenerRequest ) returns ( NewListenerResponse );

  // удаление access токена у листенера
  rpc RevokeListener ( RevokeListenerRequest ) returns ( RevokeListenerResponse );

  // регенерация access токена для листенера
  rpc RegenerateListener ( RegenerateListenerRequest ) returns ( RegenerateListenerResponse );

  // получение CA сертификата PKI (GRPC)
  rpc GetCertCA ( GetCertCARequest ) returns ( GetCertCAResponse );

  // получение сертификата операторского GRPC
  rpc GetCertOperator ( GetCertOperatorRequest ) returns ( GetCertOperatorResponse );

  // получение сертификата листенерового GRPC
  rpc GetCertListener ( GetCertListenerRequest ) returns ( GetCertListenerResponse );
}

// сообщение, в котором хранятся данные об отдельном операторе
message Operator {
  // [ОБЯЗАТЕЛЬНОЕ] имя оператора
  string username = 1;
  // access токен оператора
  google.protobuf.StringValue token = 2;
  // время последней активности оператора
  google.protobuf.Timestamp last = 3;
}


// сообщение, в котором хранятся данные об отдельном листенере
message Listener {
  // [ОБЯЗАТЕЛЬНОЕ] ID листенера
  int64 lid = 1;
  // access токен листенера
  google.protobuf.StringValue token = 2;
  // имя листенера
  google.protobuf.StringValue name = 3;
  // IP адрес листенера
  google.protobuf.StringValue ip = 4;
  // порт листенера
  google.protobuf.UInt32Value port = 5;
  // время последней активности листенера
  google.protobuf.Timestamp last = 6;
}

// сообщение, в котором хранятся данные о сертификате
message Certificate {
  string data = 1;
}

// --> GetOperators
message GetOperatorsRequest {}
message GetOperatorsResponse {
  repeated Operator operators = 1;
}
// <-- GetOperators


// --> NewOperator
message NewOperatorRequest {
  // [ОБЯЗАТЕЛЬНОЕ] имя оператора
  string username = 1;
}
message NewOperatorResponse {
  Operator operator = 1;
}
// <-- NewOperator


// --> RevokeOperator
message RevokeOperatorRequest {
  // [ОБЯЗАТЕЛЬНОЕ] имя оператора
  string username = 1;
}
message RevokeOperatorResponse {}
// <-- RevokeOperator


// --> RegenerateOperator
message RegenerateOperatorRequest {
  // [ОБЯЗАТЕЛЬНОЕ] имя оператора
  string username = 1;
}
message RegenerateOperatorResponse {
  Operator operator = 1;
}
// <-- RegenerateOperator


// --> GetListeners
message GetListenersRequest {}
message GetListenersResponse {
  repeated Listener listeners = 1;
}
// <-- GetListeners


// --> NewListener
message NewListenerRequest {}
message NewListenerResponse {
  Listener listener = 1;
}
// <-- NewListener


// --> RevokeListener
message RevokeListenerRequest {
  // [ОБЯЗАТЕЛЬНОЕ] ID листенера
  int64 lid = 1;
}
message RevokeListenerResponse {}
// <-- RevokeListener


// --> RegenerateListener
message RegenerateListenerRequest {
  // [ОБЯЗАТЕЛЬНОЕ] ID листенера
  int64 lid = 1;
}
message RegenerateListenerResponse {
  Listener listener = 1;
}
// <-- RegenerateListener

// --> GetCertCA
message GetCertCARequest {}
message GetCertCAResponse {
  Certificate certificate = 1;
}
// <-- GetCertCA

// --> GetCertOperator
message GetCertOperatorRequest {}
message GetCertOperatorResponse {
  Certificate certificate = 1;
}
// <-- GetCertOperator

// --> GetCertListener
message GetCertListenerRequest {}
message GetCertListenerResponse {
  Certificate certificate = 1;
}
// <-- GetCertListener
